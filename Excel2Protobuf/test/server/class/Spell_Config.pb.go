// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Spell_Config.proto

package ConfigData

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActiveSpell_Config struct {
	//* 唯一标识
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* 冷却
	Cd int32 `protobuf:"varint,2,opt,name=cd,proto3" json:"cd,omitempty"`
	//* 能量消耗
	Cost int32 `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
	//* 技能释放条件
	PreConditionType string `protobuf:"bytes,4,opt,name=pre_condition_type,json=preConditionType,proto3" json:"pre_condition_type,omitempty"`
	//* 技能释放条件参数
	PreConditionData string `protobuf:"bytes,5,opt,name=pre_condition_data,json=preConditionData,proto3" json:"pre_condition_data,omitempty"`
	//* 【特效名-延迟到动画的第几帧触发特效】触发阶段动画特效(-X表示第几帧触发该特效)
	TriggerAnimEffect string `protobuf:"bytes,6,opt,name=trigger_anim_effect,json=triggerAnimEffect,proto3" json:"trigger_anim_effect,omitempty"`
	//* 【id1-id2..|id3..】触发的功能索引（id1,id2|id3,id4)
	TriggerFuncId []string `protobuf:"bytes,7,rep,name=trigger_func_id,json=triggerFuncId,proto3" json:"trigger_func_id,omitempty"`
	//* 触发技能对目标产生效果同时对自身再触发X个效果，每个效果使用|分割
	TriggerOnMeFuncId []string `protobuf:"bytes,8,rep,name=trigger_on_me_func_id,json=triggerOnMeFuncId,proto3" json:"trigger_on_me_func_id,omitempty"`
	//* 技能范围特效
	RangeEff string `protobuf:"bytes,9,opt,name=range_eff,json=rangeEff,proto3" json:"range_eff,omitempty"`
	//* 技能范围持续时间
	RangeEffTime float32 `protobuf:"fixed32,10,opt,name=range_eff_time,json=rangeEffTime,proto3" json:"range_eff_time,omitempty"`
	//* 队伍的buff特效
	TeamBuffEffect []string `protobuf:"bytes,11,rep,name=team_buff_effect,json=teamBuffEffect,proto3" json:"team_buff_effect,omitempty"`
	//* 传染时间间隔|传染持续时间|传染半径|每次传染最大人数|最大传播代数
	Infection []float32 `protobuf:"fixed32,12,rep,packed,name=infection,proto3" json:"infection,omitempty"`
	//* 子弹id
	BulletId string `protobuf:"bytes,13,opt,name=bullet_id,json=bulletId,proto3" json:"bullet_id,omitempty"`
	//* 子弹延迟释放时间
	BulletLaunchDelay string `protobuf:"bytes,14,opt,name=bullet_launch_delay,json=bulletLaunchDelay,proto3" json:"bullet_launch_delay,omitempty"`
	//* 子弹飞行特效
	BulletEffect string `protobuf:"bytes,15,opt,name=bullet_effect,json=bulletEffect,proto3" json:"bullet_effect,omitempty"`
	//* 子弹命中特效
	BulletHit string `protobuf:"bytes,16,opt,name=bullet_hit,json=bulletHit,proto3" json:"bullet_hit,omitempty"`
	//* 延迟触发效果时间
	TriggerDelay string `protobuf:"bytes,17,opt,name=trigger_delay,json=triggerDelay,proto3" json:"trigger_delay,omitempty"`
	//* 伤害数字在hit后延迟x秒触发
	DamageNumDelay float32 `protobuf:"fixed32,18,opt,name=damage_num_delay,json=damageNumDelay,proto3" json:"damage_num_delay,omitempty"`
	//* 连锁特效名（用于士兵上的表现）
	ChainEffect string `protobuf:"bytes,19,opt,name=chain_effect,json=chainEffect,proto3" json:"chain_effect,omitempty"`
	//* 连锁命中特效（用于士兵上的表现）
	ChainEffectHit string `protobuf:"bytes,20,opt,name=chain_effect_hit,json=chainEffectHit,proto3" json:"chain_effect_hit,omitempty"`
	//* 连锁特效的速度
	ChainSpeed float32 `protobuf:"fixed32,21,opt,name=chain_speed,json=chainSpeed,proto3" json:"chain_speed,omitempty"`
	//* 特写场景名
	Sfx string `protobuf:"bytes,22,opt,name=sfx,proto3" json:"sfx,omitempty"`
	//* 持续时间
	SfxTime float32 `protobuf:"fixed32,23,opt,name=sfx_time,json=sfxTime,proto3" json:"sfx_time,omitempty"`
	//* 子弹跟随镜头
	CamBullet uint32 `protobuf:"varint,24,opt,name=cam_bullet,json=camBullet,proto3" json:"cam_bullet,omitempty"`
	//* 子弹爆炸镜头
	CamBulletHit uint32 `protobuf:"varint,25,opt,name=cam_bullet_hit,json=camBulletHit,proto3" json:"cam_bullet_hit,omitempty"`
	//* 子弹目标
	BulletTarget string `protobuf:"bytes,26,opt,name=bullet_target,json=bulletTarget,proto3" json:"bullet_target,omitempty"`
	//* 子弹目标选中后影响的范围
	DataTarget string `protobuf:"bytes,27,opt,name=data_target,json=dataTarget,proto3" json:"data_target,omitempty"`
	//* 特写镜头
	CamFeature uint32 `protobuf:"varint,28,opt,name=cam_feature,json=camFeature,proto3" json:"cam_feature,omitempty"`
	//* 触发镜头
	CamTrigger uint32 `protobuf:"varint,29,opt,name=cam_trigger,json=camTrigger,proto3" json:"cam_trigger,omitempty"`
	//*
	DataParamSpeed string `protobuf:"bytes,30,opt,name=data_param_speed,json=dataParamSpeed,proto3" json:"data_param_speed,omitempty"`
	//* 触发效果的生命周期
	TriggerLifeTime float32 `protobuf:"fixed32,31,opt,name=trigger_life_time,json=triggerLifeTime,proto3" json:"trigger_life_time,omitempty"`
	//* 触发效果的时间间隔
	TriggerDeltaTime float32 `protobuf:"fixed32,32,opt,name=trigger_delta_time,json=triggerDeltaTime,proto3" json:"trigger_delta_time,omitempty"`
	//* 技能动画中是否可动
	SpellAnimCanMove []string `protobuf:"bytes,33,rep,name=spell_anim_can_move,json=spellAnimCanMove,proto3" json:"spell_anim_can_move,omitempty"`
	//* 技能范围特效后段
	RangeEffPost string `protobuf:"bytes,34,opt,name=range_eff_post,json=rangeEffPost,proto3" json:"range_eff_post,omitempty"`
	//* 技能释放音效
	SpellSound string `protobuf:"bytes,35,opt,name=spell_sound,json=spellSound,proto3" json:"spell_sound,omitempty"`
	//* 技能击中音效
	SpellTriggerSound string `protobuf:"bytes,36,opt,name=spell_trigger_sound,json=spellTriggerSound,proto3" json:"spell_trigger_sound,omitempty"`
	//* 特写音效
	SfxSound string `protobuf:"bytes,37,opt,name=sfx_sound,json=sfxSound,proto3" json:"sfx_sound,omitempty"`
	//* 技能释放条件额外数据
	PreConditionDataex string `protobuf:"bytes,38,opt,name=pre_condition_dataex,json=preConditionDataex,proto3" json:"pre_condition_dataex,omitempty"`
	//* 预备阶段动画名
	PreAnim string `protobuf:"bytes,39,opt,name=pre_anim,json=preAnim,proto3" json:"pre_anim,omitempty"`
	//* 预备阶段动画特效
	PreAnimEffect string `protobuf:"bytes,40,opt,name=pre_anim_effect,json=preAnimEffect,proto3" json:"pre_anim_effect,omitempty"`
	//* 收尾阶段动画名
	PostAnim string `protobuf:"bytes,41,opt,name=post_anim,json=postAnim,proto3" json:"post_anim,omitempty"`
	//* 收尾阶段动画特效
	PostAnimEffect string `protobuf:"bytes,42,opt,name=post_anim_effect,json=postAnimEffect,proto3" json:"post_anim_effect,omitempty"`
	//* 公共冷却
	PublicCd float32 `protobuf:"fixed32,43,opt,name=public_cd,json=publicCd,proto3" json:"public_cd,omitempty"`
	//* 技能范围特效后段时间
	RangeEffPostTime float32 `protobuf:"fixed32,44,opt,name=range_eff_post_time,json=rangeEffPostTime,proto3" json:"range_eff_post_time,omitempty"`
	//* 技能影响目标数量成长
	//A2(A1的基础值在前面配置了，B1B2在这里不用，默认为0，只和等级成长）
	TargetmaxGrowth      string   `protobuf:"bytes,45,opt,name=targetmax_growth,json=targetmaxGrowth,proto3" json:"targetmax_growth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActiveSpell_Config) Reset()         { *m = ActiveSpell_Config{} }
func (m *ActiveSpell_Config) String() string { return proto.CompactTextString(m) }
func (*ActiveSpell_Config) ProtoMessage()    {}
func (*ActiveSpell_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a08c97153d4a5c, []int{0}
}

func (m *ActiveSpell_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActiveSpell_Config.Unmarshal(m, b)
}
func (m *ActiveSpell_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActiveSpell_Config.Marshal(b, m, deterministic)
}
func (m *ActiveSpell_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveSpell_Config.Merge(m, src)
}
func (m *ActiveSpell_Config) XXX_Size() int {
	return xxx_messageInfo_ActiveSpell_Config.Size(m)
}
func (m *ActiveSpell_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveSpell_Config.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveSpell_Config proto.InternalMessageInfo

func (m *ActiveSpell_Config) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActiveSpell_Config) GetCd() int32 {
	if m != nil {
		return m.Cd
	}
	return 0
}

func (m *ActiveSpell_Config) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *ActiveSpell_Config) GetPreConditionType() string {
	if m != nil {
		return m.PreConditionType
	}
	return ""
}

func (m *ActiveSpell_Config) GetPreConditionData() string {
	if m != nil {
		return m.PreConditionData
	}
	return ""
}

func (m *ActiveSpell_Config) GetTriggerAnimEffect() string {
	if m != nil {
		return m.TriggerAnimEffect
	}
	return ""
}

func (m *ActiveSpell_Config) GetTriggerFuncId() []string {
	if m != nil {
		return m.TriggerFuncId
	}
	return nil
}

func (m *ActiveSpell_Config) GetTriggerOnMeFuncId() []string {
	if m != nil {
		return m.TriggerOnMeFuncId
	}
	return nil
}

func (m *ActiveSpell_Config) GetRangeEff() string {
	if m != nil {
		return m.RangeEff
	}
	return ""
}

func (m *ActiveSpell_Config) GetRangeEffTime() float32 {
	if m != nil {
		return m.RangeEffTime
	}
	return 0
}

func (m *ActiveSpell_Config) GetTeamBuffEffect() []string {
	if m != nil {
		return m.TeamBuffEffect
	}
	return nil
}

func (m *ActiveSpell_Config) GetInfection() []float32 {
	if m != nil {
		return m.Infection
	}
	return nil
}

func (m *ActiveSpell_Config) GetBulletId() string {
	if m != nil {
		return m.BulletId
	}
	return ""
}

func (m *ActiveSpell_Config) GetBulletLaunchDelay() string {
	if m != nil {
		return m.BulletLaunchDelay
	}
	return ""
}

func (m *ActiveSpell_Config) GetBulletEffect() string {
	if m != nil {
		return m.BulletEffect
	}
	return ""
}

func (m *ActiveSpell_Config) GetBulletHit() string {
	if m != nil {
		return m.BulletHit
	}
	return ""
}

func (m *ActiveSpell_Config) GetTriggerDelay() string {
	if m != nil {
		return m.TriggerDelay
	}
	return ""
}

func (m *ActiveSpell_Config) GetDamageNumDelay() float32 {
	if m != nil {
		return m.DamageNumDelay
	}
	return 0
}

func (m *ActiveSpell_Config) GetChainEffect() string {
	if m != nil {
		return m.ChainEffect
	}
	return ""
}

func (m *ActiveSpell_Config) GetChainEffectHit() string {
	if m != nil {
		return m.ChainEffectHit
	}
	return ""
}

func (m *ActiveSpell_Config) GetChainSpeed() float32 {
	if m != nil {
		return m.ChainSpeed
	}
	return 0
}

func (m *ActiveSpell_Config) GetSfx() string {
	if m != nil {
		return m.Sfx
	}
	return ""
}

func (m *ActiveSpell_Config) GetSfxTime() float32 {
	if m != nil {
		return m.SfxTime
	}
	return 0
}

func (m *ActiveSpell_Config) GetCamBullet() uint32 {
	if m != nil {
		return m.CamBullet
	}
	return 0
}

func (m *ActiveSpell_Config) GetCamBulletHit() uint32 {
	if m != nil {
		return m.CamBulletHit
	}
	return 0
}

func (m *ActiveSpell_Config) GetBulletTarget() string {
	if m != nil {
		return m.BulletTarget
	}
	return ""
}

func (m *ActiveSpell_Config) GetDataTarget() string {
	if m != nil {
		return m.DataTarget
	}
	return ""
}

func (m *ActiveSpell_Config) GetCamFeature() uint32 {
	if m != nil {
		return m.CamFeature
	}
	return 0
}

func (m *ActiveSpell_Config) GetCamTrigger() uint32 {
	if m != nil {
		return m.CamTrigger
	}
	return 0
}

func (m *ActiveSpell_Config) GetDataParamSpeed() string {
	if m != nil {
		return m.DataParamSpeed
	}
	return ""
}

func (m *ActiveSpell_Config) GetTriggerLifeTime() float32 {
	if m != nil {
		return m.TriggerLifeTime
	}
	return 0
}

func (m *ActiveSpell_Config) GetTriggerDeltaTime() float32 {
	if m != nil {
		return m.TriggerDeltaTime
	}
	return 0
}

func (m *ActiveSpell_Config) GetSpellAnimCanMove() []string {
	if m != nil {
		return m.SpellAnimCanMove
	}
	return nil
}

func (m *ActiveSpell_Config) GetRangeEffPost() string {
	if m != nil {
		return m.RangeEffPost
	}
	return ""
}

func (m *ActiveSpell_Config) GetSpellSound() string {
	if m != nil {
		return m.SpellSound
	}
	return ""
}

func (m *ActiveSpell_Config) GetSpellTriggerSound() string {
	if m != nil {
		return m.SpellTriggerSound
	}
	return ""
}

func (m *ActiveSpell_Config) GetSfxSound() string {
	if m != nil {
		return m.SfxSound
	}
	return ""
}

func (m *ActiveSpell_Config) GetPreConditionDataex() string {
	if m != nil {
		return m.PreConditionDataex
	}
	return ""
}

func (m *ActiveSpell_Config) GetPreAnim() string {
	if m != nil {
		return m.PreAnim
	}
	return ""
}

func (m *ActiveSpell_Config) GetPreAnimEffect() string {
	if m != nil {
		return m.PreAnimEffect
	}
	return ""
}

func (m *ActiveSpell_Config) GetPostAnim() string {
	if m != nil {
		return m.PostAnim
	}
	return ""
}

func (m *ActiveSpell_Config) GetPostAnimEffect() string {
	if m != nil {
		return m.PostAnimEffect
	}
	return ""
}

func (m *ActiveSpell_Config) GetPublicCd() float32 {
	if m != nil {
		return m.PublicCd
	}
	return 0
}

func (m *ActiveSpell_Config) GetRangeEffPostTime() float32 {
	if m != nil {
		return m.RangeEffPostTime
	}
	return 0
}

func (m *ActiveSpell_Config) GetTargetmaxGrowth() string {
	if m != nil {
		return m.TargetmaxGrowth
	}
	return ""
}

type SkillData_Config struct {
	//* 唯一标识
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* 天赋名称索引
	NameGlobalId string `protobuf:"bytes,2,opt,name=name_global_id,json=nameGlobalId,proto3" json:"name_global_id,omitempty"`
	//* 天赋说明索引
	DesGlobalId string `protobuf:"bytes,3,opt,name=des_global_id,json=desGlobalId,proto3" json:"des_global_id,omitempty"`
	//* 技能图标
	Icon string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	//* 主动技能ID
	ActiveId uint32 `protobuf:"varint,5,opt,name=active_id,json=activeId,proto3" json:"active_id,omitempty"`
	//* 被动技能ID
	PassiveId uint32 `protobuf:"varint,6,opt,name=passive_id,json=passiveId,proto3" json:"passive_id,omitempty"`
	//* 技能最高等级
	LevelMax int32 `protobuf:"varint,7,opt,name=level_max,json=levelMax,proto3" json:"level_max,omitempty"`
	//* 技能战力系数1
	StrengthRate1 float32 `protobuf:"fixed32,8,opt,name=strength_rate1,json=strengthRate1,proto3" json:"strength_rate1,omitempty"`
	//* 技能战力系数2
	StrengthRate2 float32 `protobuf:"fixed32,9,opt,name=strength_rate2,json=strengthRate2,proto3" json:"strength_rate2,omitempty"`
	//* 技能战力系数3
	StrengthRate3 float32 `protobuf:"fixed32,10,opt,name=strength_rate3,json=strengthRate3,proto3" json:"strength_rate3,omitempty"`
	//*
	DebugLevel int32 `protobuf:"varint,11,opt,name=debug_level,json=debugLevel,proto3" json:"debug_level,omitempty"`
	//* 激活英雄等级
	ActiveLevel          int32    `protobuf:"varint,12,opt,name=active_level,json=activeLevel,proto3" json:"active_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkillData_Config) Reset()         { *m = SkillData_Config{} }
func (m *SkillData_Config) String() string { return proto.CompactTextString(m) }
func (*SkillData_Config) ProtoMessage()    {}
func (*SkillData_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a08c97153d4a5c, []int{1}
}

func (m *SkillData_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SkillData_Config.Unmarshal(m, b)
}
func (m *SkillData_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SkillData_Config.Marshal(b, m, deterministic)
}
func (m *SkillData_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillData_Config.Merge(m, src)
}
func (m *SkillData_Config) XXX_Size() int {
	return xxx_messageInfo_SkillData_Config.Size(m)
}
func (m *SkillData_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillData_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SkillData_Config proto.InternalMessageInfo

func (m *SkillData_Config) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SkillData_Config) GetNameGlobalId() string {
	if m != nil {
		return m.NameGlobalId
	}
	return ""
}

func (m *SkillData_Config) GetDesGlobalId() string {
	if m != nil {
		return m.DesGlobalId
	}
	return ""
}

func (m *SkillData_Config) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *SkillData_Config) GetActiveId() uint32 {
	if m != nil {
		return m.ActiveId
	}
	return 0
}

func (m *SkillData_Config) GetPassiveId() uint32 {
	if m != nil {
		return m.PassiveId
	}
	return 0
}

func (m *SkillData_Config) GetLevelMax() int32 {
	if m != nil {
		return m.LevelMax
	}
	return 0
}

func (m *SkillData_Config) GetStrengthRate1() float32 {
	if m != nil {
		return m.StrengthRate1
	}
	return 0
}

func (m *SkillData_Config) GetStrengthRate2() float32 {
	if m != nil {
		return m.StrengthRate2
	}
	return 0
}

func (m *SkillData_Config) GetStrengthRate3() float32 {
	if m != nil {
		return m.StrengthRate3
	}
	return 0
}

func (m *SkillData_Config) GetDebugLevel() int32 {
	if m != nil {
		return m.DebugLevel
	}
	return 0
}

func (m *SkillData_Config) GetActiveLevel() int32 {
	if m != nil {
		return m.ActiveLevel
	}
	return 0
}

type DataChangeFunc_Config struct {
	//* 变值索引
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* 值种类
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	//* 二次增长
	K1 float32 `protobuf:"fixed32,3,opt,name=k1,proto3" json:"k1,omitempty"`
	//* 一次增长
	K2 float32 `protobuf:"fixed32,4,opt,name=k2,proto3" json:"k2,omitempty"`
	//* 初始值
	K3 float32 `protobuf:"fixed32,5,opt,name=k3,proto3" json:"k3,omitempty"`
	//* 值的格式(0表示数值1表示百分比)
	DataType uint32 `protobuf:"varint,6,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	//* 额外值
	Dataex string `protobuf:"bytes,7,opt,name=dataex,proto3" json:"dataex,omitempty"`
	//* 技能附带字幕
	Dataex2 string `protobuf:"bytes,8,opt,name=dataex2,proto3" json:"dataex2,omitempty"`
	//* 开始特效
	DataStartEff string `protobuf:"bytes,9,opt,name=data_start_eff,json=dataStartEff,proto3" json:"data_start_eff,omitempty"`
	//* 变值带的特效
	DataEff string `protobuf:"bytes,10,opt,name=data_eff,json=dataEff,proto3" json:"data_eff,omitempty"`
	//*
	DataEndEff string `protobuf:"bytes,11,opt,name=data_end_eff,json=dataEndEff,proto3" json:"data_end_eff,omitempty"`
	//* 特效出现概率
	DataEffProb float32 `protobuf:"fixed32,12,opt,name=data_eff_prob,json=dataEffProb,proto3" json:"data_eff_prob,omitempty"`
	//* 变值持续时间
	DataTime float32 `protobuf:"fixed32,13,opt,name=data_time,json=dataTime,proto3" json:"data_time,omitempty"`
	//* 击飞 概率|横向速度|纵向速度(正常击飞)+击飞 概率|横向速度|纵向速度(死亡击飞)
	DataHitFly string `protobuf:"bytes,14,opt,name=data_hit_fly,json=dataHitFly,proto3" json:"data_hit_fly,omitempty"`
	//* -1 负面效果 0 中性 1 正面效果（标记buff，用以驱散技能）
	BuffNature int32 `protobuf:"varint,15,opt,name=buff_nature,json=buffNature,proto3" json:"buff_nature,omitempty"`
	//* 效果在UI上的icon
	Icon string `protobuf:"bytes,16,opt,name=icon,proto3" json:"icon,omitempty"`
	//* buff效果（默认是0，新效果覆盖旧效果、1新效果叠加旧效果）
	Superposition int32 `protobuf:"varint,17,opt,name=superposition,proto3" json:"superposition,omitempty"`
	//* icon显示位置（0是负面，1是正面）
	IconPosition string `protobuf:"bytes,18,opt,name=icon_position,json=iconPosition,proto3" json:"icon_position,omitempty"`
	//* 附带标签
	Mark string `protobuf:"bytes,19,opt,name=mark,proto3" json:"mark,omitempty"`
	//* 0 影响时间 1 影响效果
	MarkAffectedRate int32 `protobuf:"varint,20,opt,name=mark_affected_rate,json=markAffectedRate,proto3" json:"mark_affected_rate,omitempty"`
	//* 成长主属性
	GrowthProp           string   `protobuf:"bytes,21,opt,name=growth_prop,json=growthProp,proto3" json:"growth_prop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataChangeFunc_Config) Reset()         { *m = DataChangeFunc_Config{} }
func (m *DataChangeFunc_Config) String() string { return proto.CompactTextString(m) }
func (*DataChangeFunc_Config) ProtoMessage()    {}
func (*DataChangeFunc_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a08c97153d4a5c, []int{2}
}

func (m *DataChangeFunc_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataChangeFunc_Config.Unmarshal(m, b)
}
func (m *DataChangeFunc_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataChangeFunc_Config.Marshal(b, m, deterministic)
}
func (m *DataChangeFunc_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataChangeFunc_Config.Merge(m, src)
}
func (m *DataChangeFunc_Config) XXX_Size() int {
	return xxx_messageInfo_DataChangeFunc_Config.Size(m)
}
func (m *DataChangeFunc_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_DataChangeFunc_Config.DiscardUnknown(m)
}

var xxx_messageInfo_DataChangeFunc_Config proto.InternalMessageInfo

func (m *DataChangeFunc_Config) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DataChangeFunc_Config) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DataChangeFunc_Config) GetK1() float32 {
	if m != nil {
		return m.K1
	}
	return 0
}

func (m *DataChangeFunc_Config) GetK2() float32 {
	if m != nil {
		return m.K2
	}
	return 0
}

func (m *DataChangeFunc_Config) GetK3() float32 {
	if m != nil {
		return m.K3
	}
	return 0
}

func (m *DataChangeFunc_Config) GetDataType() uint32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *DataChangeFunc_Config) GetDataex() string {
	if m != nil {
		return m.Dataex
	}
	return ""
}

func (m *DataChangeFunc_Config) GetDataex2() string {
	if m != nil {
		return m.Dataex2
	}
	return ""
}

func (m *DataChangeFunc_Config) GetDataStartEff() string {
	if m != nil {
		return m.DataStartEff
	}
	return ""
}

func (m *DataChangeFunc_Config) GetDataEff() string {
	if m != nil {
		return m.DataEff
	}
	return ""
}

func (m *DataChangeFunc_Config) GetDataEndEff() string {
	if m != nil {
		return m.DataEndEff
	}
	return ""
}

func (m *DataChangeFunc_Config) GetDataEffProb() float32 {
	if m != nil {
		return m.DataEffProb
	}
	return 0
}

func (m *DataChangeFunc_Config) GetDataTime() float32 {
	if m != nil {
		return m.DataTime
	}
	return 0
}

func (m *DataChangeFunc_Config) GetDataHitFly() string {
	if m != nil {
		return m.DataHitFly
	}
	return ""
}

func (m *DataChangeFunc_Config) GetBuffNature() int32 {
	if m != nil {
		return m.BuffNature
	}
	return 0
}

func (m *DataChangeFunc_Config) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *DataChangeFunc_Config) GetSuperposition() int32 {
	if m != nil {
		return m.Superposition
	}
	return 0
}

func (m *DataChangeFunc_Config) GetIconPosition() string {
	if m != nil {
		return m.IconPosition
	}
	return ""
}

func (m *DataChangeFunc_Config) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

func (m *DataChangeFunc_Config) GetMarkAffectedRate() int32 {
	if m != nil {
		return m.MarkAffectedRate
	}
	return 0
}

func (m *DataChangeFunc_Config) GetGrowthProp() string {
	if m != nil {
		return m.GrowthProp
	}
	return ""
}

type PassiveSpell_Config struct {
	//* 被动技能id
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* 激活条件
	ActiveCondition string `protobuf:"bytes,2,opt,name=active_condition,json=activeCondition,proto3" json:"active_condition,omitempty"`
	//* 满足激活条件后的有效时间
	ActiveTime float32 `protobuf:"fixed32,3,opt,name=active_time,json=activeTime,proto3" json:"active_time,omitempty"`
	//* 被动技能效果发生的条件
	TriggerCondition string `protobuf:"bytes,4,opt,name=trigger_condition,json=triggerCondition,proto3" json:"trigger_condition,omitempty"`
	//* 触发参数
	TriggerConditionParam string `protobuf:"bytes,5,opt,name=trigger_condition_param,json=triggerConditionParam,proto3" json:"trigger_condition_param,omitempty"`
	//* 触发概率
	TriggerProbability float32 `protobuf:"fixed32,6,opt,name=trigger_probability,json=triggerProbability,proto3" json:"trigger_probability,omitempty"`
	//* 触发CD时间（属性放在team上）
	TriggerCd int32 `protobuf:"varint,7,opt,name=trigger_cd,json=triggerCd,proto3" json:"trigger_cd,omitempty"`
	//* 被动技能影响的目标team|hero|members
	CommandTarget string `protobuf:"bytes,8,opt,name=command_target,json=commandTarget,proto3" json:"command_target,omitempty"`
	//* 技能命令
	Command string `protobuf:"bytes,9,opt,name=command,proto3" json:"command,omitempty"`
	//* 触发调用的DataId或参数
	Data uint32 `protobuf:"varint,10,opt,name=data,proto3" json:"data,omitempty"`
	//*
	OverrideDataK1 int32 `protobuf:"varint,11,opt,name=override_data_k1,json=overrideDataK1,proto3" json:"override_data_k1,omitempty"`
	//*
	OverrideDataK2 int32 `protobuf:"varint,12,opt,name=override_data_k2,json=overrideDataK2,proto3" json:"override_data_k2,omitempty"`
	//*
	OverrideDataK3 int32 `protobuf:"varint,13,opt,name=override_data_k3,json=overrideDataK3,proto3" json:"override_data_k3,omitempty"`
	//*
	OverrideDataTime int32 `protobuf:"varint,14,opt,name=override_data_time,json=overrideDataTime,proto3" json:"override_data_time,omitempty"`
	//* 触发特效
	Effect string `protobuf:"bytes,15,opt,name=effect,proto3" json:"effect,omitempty"`
	//* 被动技能评分
	Score                int32    `protobuf:"varint,16,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PassiveSpell_Config) Reset()         { *m = PassiveSpell_Config{} }
func (m *PassiveSpell_Config) String() string { return proto.CompactTextString(m) }
func (*PassiveSpell_Config) ProtoMessage()    {}
func (*PassiveSpell_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a08c97153d4a5c, []int{3}
}

func (m *PassiveSpell_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PassiveSpell_Config.Unmarshal(m, b)
}
func (m *PassiveSpell_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PassiveSpell_Config.Marshal(b, m, deterministic)
}
func (m *PassiveSpell_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PassiveSpell_Config.Merge(m, src)
}
func (m *PassiveSpell_Config) XXX_Size() int {
	return xxx_messageInfo_PassiveSpell_Config.Size(m)
}
func (m *PassiveSpell_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_PassiveSpell_Config.DiscardUnknown(m)
}

var xxx_messageInfo_PassiveSpell_Config proto.InternalMessageInfo

func (m *PassiveSpell_Config) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PassiveSpell_Config) GetActiveCondition() string {
	if m != nil {
		return m.ActiveCondition
	}
	return ""
}

func (m *PassiveSpell_Config) GetActiveTime() float32 {
	if m != nil {
		return m.ActiveTime
	}
	return 0
}

func (m *PassiveSpell_Config) GetTriggerCondition() string {
	if m != nil {
		return m.TriggerCondition
	}
	return ""
}

func (m *PassiveSpell_Config) GetTriggerConditionParam() string {
	if m != nil {
		return m.TriggerConditionParam
	}
	return ""
}

func (m *PassiveSpell_Config) GetTriggerProbability() float32 {
	if m != nil {
		return m.TriggerProbability
	}
	return 0
}

func (m *PassiveSpell_Config) GetTriggerCd() int32 {
	if m != nil {
		return m.TriggerCd
	}
	return 0
}

func (m *PassiveSpell_Config) GetCommandTarget() string {
	if m != nil {
		return m.CommandTarget
	}
	return ""
}

func (m *PassiveSpell_Config) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *PassiveSpell_Config) GetData() uint32 {
	if m != nil {
		return m.Data
	}
	return 0
}

func (m *PassiveSpell_Config) GetOverrideDataK1() int32 {
	if m != nil {
		return m.OverrideDataK1
	}
	return 0
}

func (m *PassiveSpell_Config) GetOverrideDataK2() int32 {
	if m != nil {
		return m.OverrideDataK2
	}
	return 0
}

func (m *PassiveSpell_Config) GetOverrideDataK3() int32 {
	if m != nil {
		return m.OverrideDataK3
	}
	return 0
}

func (m *PassiveSpell_Config) GetOverrideDataTime() int32 {
	if m != nil {
		return m.OverrideDataTime
	}
	return 0
}

func (m *PassiveSpell_Config) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

func (m *PassiveSpell_Config) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type CreateBullet_Config struct {
	//* 子弹索引
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* 子弹发出点
	Point string `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
	//* 横向速度
	HorizonSpeed float32 `protobuf:"fixed32,3,opt,name=horizon_speed,json=horizonSpeed,proto3" json:"horizon_speed,omitempty"`
	//* 水平飞行无目标的最大距离
	HorizontalRange float32 `protobuf:"fixed32,4,opt,name=horizontal_range,json=horizontalRange,proto3" json:"horizontal_range,omitempty"`
	//*
	TraceMissile float32 `protobuf:"fixed32,5,opt,name=trace_missile,json=traceMissile,proto3" json:"trace_missile,omitempty"`
	//* 抛物线高度
	ParabolaHeight float32 `protobuf:"fixed32,6,opt,name=parabola_height,json=parabolaHeight,proto3" json:"parabola_height,omitempty"`
	//*
	ParabolaSrc []float32 `protobuf:"fixed32,7,rep,packed,name=parabola_src,json=parabolaSrc,proto3" json:"parabola_src,omitempty"`
	//*
	ParabolaCtrl_1 []float32 `protobuf:"fixed32,8,rep,packed,name=parabola_ctrl_1,json=parabolaCtrl1,proto3" json:"parabola_ctrl_1,omitempty"`
	//*
	ParabolaCtrl_2 []float32 `protobuf:"fixed32,9,rep,packed,name=parabola_ctrl_2,json=parabolaCtrl2,proto3" json:"parabola_ctrl_2,omitempty"`
	//*
	ParabolaDes []float32 `protobuf:"fixed32,10,rep,packed,name=parabola_des,json=parabolaDes,proto3" json:"parabola_des,omitempty"`
	//*
	HeightOffsetMin float32 `protobuf:"fixed32,11,opt,name=height_offset_min,json=heightOffsetMin,proto3" json:"height_offset_min,omitempty"`
	//*
	HeightOffsetMax float32 `protobuf:"fixed32,12,opt,name=height_offset_max,json=heightOffsetMax,proto3" json:"height_offset_max,omitempty"`
	//*
	DesRangeOffset float32 `protobuf:"fixed32,13,opt,name=des_range_offset,json=desRangeOffset,proto3" json:"des_range_offset,omitempty"`
	//* 导弹追踪计算精准度
	BallisticCalcRate    float32  `protobuf:"fixed32,14,opt,name=ballistic_calc_rate,json=ballisticCalcRate,proto3" json:"ballistic_calc_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBullet_Config) Reset()         { *m = CreateBullet_Config{} }
func (m *CreateBullet_Config) String() string { return proto.CompactTextString(m) }
func (*CreateBullet_Config) ProtoMessage()    {}
func (*CreateBullet_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a08c97153d4a5c, []int{4}
}

func (m *CreateBullet_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBullet_Config.Unmarshal(m, b)
}
func (m *CreateBullet_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBullet_Config.Marshal(b, m, deterministic)
}
func (m *CreateBullet_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBullet_Config.Merge(m, src)
}
func (m *CreateBullet_Config) XXX_Size() int {
	return xxx_messageInfo_CreateBullet_Config.Size(m)
}
func (m *CreateBullet_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBullet_Config.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBullet_Config proto.InternalMessageInfo

func (m *CreateBullet_Config) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateBullet_Config) GetPoint() string {
	if m != nil {
		return m.Point
	}
	return ""
}

func (m *CreateBullet_Config) GetHorizonSpeed() float32 {
	if m != nil {
		return m.HorizonSpeed
	}
	return 0
}

func (m *CreateBullet_Config) GetHorizontalRange() float32 {
	if m != nil {
		return m.HorizontalRange
	}
	return 0
}

func (m *CreateBullet_Config) GetTraceMissile() float32 {
	if m != nil {
		return m.TraceMissile
	}
	return 0
}

func (m *CreateBullet_Config) GetParabolaHeight() float32 {
	if m != nil {
		return m.ParabolaHeight
	}
	return 0
}

func (m *CreateBullet_Config) GetParabolaSrc() []float32 {
	if m != nil {
		return m.ParabolaSrc
	}
	return nil
}

func (m *CreateBullet_Config) GetParabolaCtrl_1() []float32 {
	if m != nil {
		return m.ParabolaCtrl_1
	}
	return nil
}

func (m *CreateBullet_Config) GetParabolaCtrl_2() []float32 {
	if m != nil {
		return m.ParabolaCtrl_2
	}
	return nil
}

func (m *CreateBullet_Config) GetParabolaDes() []float32 {
	if m != nil {
		return m.ParabolaDes
	}
	return nil
}

func (m *CreateBullet_Config) GetHeightOffsetMin() float32 {
	if m != nil {
		return m.HeightOffsetMin
	}
	return 0
}

func (m *CreateBullet_Config) GetHeightOffsetMax() float32 {
	if m != nil {
		return m.HeightOffsetMax
	}
	return 0
}

func (m *CreateBullet_Config) GetDesRangeOffset() float32 {
	if m != nil {
		return m.DesRangeOffset
	}
	return 0
}

func (m *CreateBullet_Config) GetBallisticCalcRate() float32 {
	if m != nil {
		return m.BallisticCalcRate
	}
	return 0
}

type Skill_Level_Config struct {
	//* 唯一标识
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	//* 技能ID
	SkillId uint32 `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	//* 等级
	LevelStart int32 `protobuf:"varint,3,opt,name=level_start,json=levelStart,proto3" json:"level_start,omitempty"`
	//* 本阶等级（仅供显示，无逻辑）
	LevelEnd int32 `protobuf:"varint,4,opt,name=level_end,json=levelEnd,proto3" json:"level_end,omitempty"`
	//* 消耗材料
	Materials []uint32 `protobuf:"varint,5,rep,packed,name=materials,proto3" json:"materials,omitempty"`
	//* 技能升阶段，英雄等级需要大于等于限制等级
	LevelLimit int32 `protobuf:"varint,6,opt,name=level_limit,json=levelLimit,proto3" json:"level_limit,omitempty"`
	//* 技能升级时星级限制
	RankLimit            int32    `protobuf:"varint,7,opt,name=rank_limit,json=rankLimit,proto3" json:"rank_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Skill_Level_Config) Reset()         { *m = Skill_Level_Config{} }
func (m *Skill_Level_Config) String() string { return proto.CompactTextString(m) }
func (*Skill_Level_Config) ProtoMessage()    {}
func (*Skill_Level_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a08c97153d4a5c, []int{5}
}

func (m *Skill_Level_Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Skill_Level_Config.Unmarshal(m, b)
}
func (m *Skill_Level_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Skill_Level_Config.Marshal(b, m, deterministic)
}
func (m *Skill_Level_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Skill_Level_Config.Merge(m, src)
}
func (m *Skill_Level_Config) XXX_Size() int {
	return xxx_messageInfo_Skill_Level_Config.Size(m)
}
func (m *Skill_Level_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Skill_Level_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Skill_Level_Config proto.InternalMessageInfo

func (m *Skill_Level_Config) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Skill_Level_Config) GetSkillId() uint32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *Skill_Level_Config) GetLevelStart() int32 {
	if m != nil {
		return m.LevelStart
	}
	return 0
}

func (m *Skill_Level_Config) GetLevelEnd() int32 {
	if m != nil {
		return m.LevelEnd
	}
	return 0
}

func (m *Skill_Level_Config) GetMaterials() []uint32 {
	if m != nil {
		return m.Materials
	}
	return nil
}

func (m *Skill_Level_Config) GetLevelLimit() int32 {
	if m != nil {
		return m.LevelLimit
	}
	return 0
}

func (m *Skill_Level_Config) GetRankLimit() int32 {
	if m != nil {
		return m.RankLimit
	}
	return 0
}

type Spell_Config_Data struct {
	ActiveSpell_ConfigItems    map[uint32]*ActiveSpell_Config    `protobuf:"bytes,1,rep,name=ActiveSpell_Config_items,json=ActiveSpellConfigItems,proto3" json:"ActiveSpell_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SkillData_ConfigItems      map[uint32]*SkillData_Config      `protobuf:"bytes,2,rep,name=SkillData_Config_items,json=SkillDataConfigItems,proto3" json:"SkillData_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataChangeFunc_ConfigItems map[uint32]*DataChangeFunc_Config `protobuf:"bytes,3,rep,name=DataChangeFunc_Config_items,json=DataChangeFuncConfigItems,proto3" json:"DataChangeFunc_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PassiveSpell_ConfigItems   map[uint32]*PassiveSpell_Config   `protobuf:"bytes,4,rep,name=PassiveSpell_Config_items,json=PassiveSpellConfigItems,proto3" json:"PassiveSpell_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreateBullet_ConfigItems   map[uint32]*CreateBullet_Config   `protobuf:"bytes,5,rep,name=CreateBullet_Config_items,json=CreateBulletConfigItems,proto3" json:"CreateBullet_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Skill_Level_ConfigItems    map[uint32]*Skill_Level_Config    `protobuf:"bytes,6,rep,name=Skill_Level_Config_items,json=SkillLevelConfigItems,proto3" json:"Skill_Level_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral       struct{}                          `json:"-"`
	XXX_unrecognized           []byte                            `json:"-"`
	XXX_sizecache              int32                             `json:"-"`
}

func (m *Spell_Config_Data) Reset()         { *m = Spell_Config_Data{} }
func (m *Spell_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Spell_Config_Data) ProtoMessage()    {}
func (*Spell_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a08c97153d4a5c, []int{6}
}

func (m *Spell_Config_Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Spell_Config_Data.Unmarshal(m, b)
}
func (m *Spell_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Spell_Config_Data.Marshal(b, m, deterministic)
}
func (m *Spell_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spell_Config_Data.Merge(m, src)
}
func (m *Spell_Config_Data) XXX_Size() int {
	return xxx_messageInfo_Spell_Config_Data.Size(m)
}
func (m *Spell_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Spell_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Spell_Config_Data proto.InternalMessageInfo

func (m *Spell_Config_Data) GetActiveSpell_ConfigItems() map[uint32]*ActiveSpell_Config {
	if m != nil {
		return m.ActiveSpell_ConfigItems
	}
	return nil
}

func (m *Spell_Config_Data) GetSkillData_ConfigItems() map[uint32]*SkillData_Config {
	if m != nil {
		return m.SkillData_ConfigItems
	}
	return nil
}

func (m *Spell_Config_Data) GetDataChangeFunc_ConfigItems() map[uint32]*DataChangeFunc_Config {
	if m != nil {
		return m.DataChangeFunc_ConfigItems
	}
	return nil
}

func (m *Spell_Config_Data) GetPassiveSpell_ConfigItems() map[uint32]*PassiveSpell_Config {
	if m != nil {
		return m.PassiveSpell_ConfigItems
	}
	return nil
}

func (m *Spell_Config_Data) GetCreateBullet_ConfigItems() map[uint32]*CreateBullet_Config {
	if m != nil {
		return m.CreateBullet_ConfigItems
	}
	return nil
}

func (m *Spell_Config_Data) GetSkill_Level_ConfigItems() map[uint32]*Skill_Level_Config {
	if m != nil {
		return m.Skill_Level_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*ActiveSpell_Config)(nil), "ConfigData.ActiveSpell_Config")
	proto.RegisterType((*SkillData_Config)(nil), "ConfigData.SkillData_Config")
	proto.RegisterType((*DataChangeFunc_Config)(nil), "ConfigData.DataChangeFunc_Config")
	proto.RegisterType((*PassiveSpell_Config)(nil), "ConfigData.PassiveSpell_Config")
	proto.RegisterType((*CreateBullet_Config)(nil), "ConfigData.CreateBullet_Config")
	proto.RegisterType((*Skill_Level_Config)(nil), "ConfigData.Skill_Level_Config")
	proto.RegisterType((*Spell_Config_Data)(nil), "ConfigData.Spell_Config_Data")
	proto.RegisterMapType((map[uint32]*ActiveSpell_Config)(nil), "ConfigData.Spell_Config_Data.ActiveSpellConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*CreateBullet_Config)(nil), "ConfigData.Spell_Config_Data.CreateBulletConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*DataChangeFunc_Config)(nil), "ConfigData.Spell_Config_Data.DataChangeFuncConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*PassiveSpell_Config)(nil), "ConfigData.Spell_Config_Data.PassiveSpellConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SkillData_Config)(nil), "ConfigData.Spell_Config_Data.SkillDataConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*Skill_Level_Config)(nil), "ConfigData.Spell_Config_Data.SkillLevelConfigItemsEntry")
}

func init() { proto.RegisterFile("Spell_Config.proto", fileDescriptor_02a08c97153d4a5c) }

var fileDescriptor_02a08c97153d4a5c = []byte{
	// 2064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xdd, 0x52, 0x23, 0xc7,
	0x15, 0x2e, 0x04, 0x02, 0x74, 0xf4, 0x83, 0x76, 0x16, 0xd8, 0x61, 0xd9, 0x1f, 0x2d, 0xbb, 0xb6,
	0xb5, 0xf6, 0x9a, 0x18, 0x91, 0xc4, 0x8e, 0x2b, 0x37, 0x6b, 0x96, 0xf5, 0x52, 0x59, 0x6c, 0x6a,
	0xd8, 0xfb, 0xa9, 0xd6, 0x4c, 0x8f, 0xd4, 0xc5, 0xfc, 0x28, 0x33, 0x2d, 0x22, 0x52, 0x79, 0x8a,
	0xbc, 0x41, 0x1e, 0x2a, 0x57, 0xb9, 0xc8, 0x45, 0x1e, 0x23, 0x37, 0xae, 0x73, 0x4e, 0xb7, 0x34,
	0x42, 0x82, 0xb2, 0xaf, 0x98, 0xfe, 0xce, 0x37, 0xfd, 0xf5, 0x9c, 0x3e, 0x7f, 0x02, 0x9c, 0xcb,
	0x91, 0x8c, 0x63, 0xff, 0x24, 0x4b, 0x23, 0x35, 0x38, 0x1c, 0xe5, 0x99, 0xce, 0x1c, 0xe0, 0xd5,
	0x3b, 0xa1, 0xc5, 0xc1, 0xff, 0x1b, 0xe0, 0xbc, 0x0d, 0xb4, 0xba, 0x96, 0x65, 0xa2, 0xd3, 0x82,
	0x8a, 0x0a, 0xdd, 0x95, 0xce, 0x4a, 0xb7, 0xe9, 0x55, 0x54, 0x88, 0xeb, 0x20, 0x74, 0x2b, 0x9d,
	0x95, 0x6e, 0xd5, 0xab, 0x04, 0xa1, 0xe3, 0xc0, 0x5a, 0x90, 0x15, 0xda, 0x5d, 0x25, 0x84, 0x9e,
	0x9d, 0x37, 0xe0, 0x8c, 0x72, 0xe9, 0x07, 0x59, 0x1a, 0x2a, 0xad, 0xb2, 0xd4, 0xd7, 0x37, 0x23,
	0xe9, 0xae, 0x75, 0x56, 0xba, 0x35, 0xaf, 0x3d, 0xca, 0xe5, 0x89, 0x35, 0x7c, 0xba, 0x19, 0xc9,
	0x45, 0x76, 0x28, 0xb4, 0x70, 0xab, 0x8b, 0x6c, 0x3c, 0xa6, 0x73, 0x08, 0x0f, 0x75, 0xae, 0x06,
	0x03, 0x99, 0xfb, 0x22, 0x55, 0x89, 0x2f, 0xa3, 0x48, 0x06, 0xda, 0x5d, 0x27, 0xfa, 0x03, 0x63,
	0x7a, 0x9b, 0xaa, 0xe4, 0x94, 0x0c, 0xce, 0xe7, 0xb0, 0x65, 0xf9, 0xd1, 0x38, 0x0d, 0x7c, 0x15,
	0xba, 0x1b, 0x9d, 0xd5, 0x6e, 0xcd, 0x6b, 0x1a, 0xf8, 0xfd, 0x38, 0x0d, 0xce, 0x42, 0xe7, 0x1b,
	0xd8, 0xb1, 0xbc, 0x2c, 0xf5, 0x13, 0x39, 0x65, 0x6f, 0x12, 0xdb, 0xee, 0xfc, 0x73, 0x7a, 0x2e,
	0xcd, 0x1b, 0xfb, 0x50, 0xcb, 0x45, 0x3a, 0x90, 0x78, 0x04, 0xb7, 0x46, 0xfa, 0x9b, 0x04, 0x9c,
	0x46, 0x91, 0xf3, 0x0a, 0x5a, 0x53, 0xa3, 0xaf, 0x55, 0x22, 0x5d, 0xe8, 0xac, 0x74, 0x2b, 0x5e,
	0xc3, 0x32, 0x3e, 0xa9, 0x44, 0x3a, 0x5d, 0x68, 0x6b, 0x29, 0x12, 0xbf, 0x3f, 0x8e, 0x22, 0xfb,
	0x25, 0x75, 0xd2, 0x6b, 0x21, 0xfe, 0xc3, 0x38, 0x8a, 0xcc, 0x67, 0x3c, 0x81, 0x9a, 0x4a, 0xf1,
	0x49, 0x65, 0xa9, 0xdb, 0xe8, 0xac, 0x76, 0x2b, 0xde, 0x0c, 0xc0, 0xa3, 0xf4, 0xc7, 0x71, 0x2c,
	0x35, 0x1e, 0xb8, 0xc9, 0x47, 0x61, 0xe0, 0x2c, 0x44, 0x8f, 0x19, 0x63, 0x2c, 0xc6, 0x69, 0x30,
	0xf4, 0x43, 0x19, 0x8b, 0x1b, 0xb7, 0xc5, 0x1e, 0x63, 0xd3, 0x47, 0xb2, 0xbc, 0x43, 0x83, 0xf3,
	0x12, 0x9a, 0x86, 0x6f, 0x4e, 0xb4, 0x45, 0xcc, 0x06, 0x83, 0xe6, 0x3c, 0x4f, 0x01, 0x0c, 0x69,
	0xa8, 0xb4, 0xdb, 0x26, 0x86, 0x39, 0xc3, 0x07, 0xa5, 0x71, 0x0f, 0xeb, 0x4d, 0x56, 0x7b, 0xc0,
	0x7b, 0x18, 0x90, 0x85, 0xba, 0xd0, 0x0e, 0x45, 0x22, 0x06, 0xd2, 0x4f, 0xc7, 0x89, 0xe1, 0x39,
	0xe4, 0xa5, 0x16, 0xe3, 0x3f, 0x8d, 0x13, 0x66, 0xbe, 0x80, 0x46, 0x30, 0x14, 0x2a, 0xb5, 0x27,
	0x7a, 0x48, 0xbb, 0xd5, 0x09, 0x33, 0x07, 0xea, 0x42, 0xbb, 0x4c, 0xa1, 0x63, 0x6d, 0x13, 0xad,
	0x55, 0xa2, 0xe1, 0xd9, 0x9e, 0x03, 0xbf, 0xe8, 0x17, 0x23, 0x29, 0x43, 0x77, 0x87, 0x14, 0x81,
	0xa0, 0x4b, 0x44, 0x9c, 0x36, 0xac, 0x16, 0xd1, 0xc4, 0xdd, 0xa5, 0xb7, 0xf1, 0xd1, 0xd9, 0x83,
	0xcd, 0x22, 0x9a, 0xf0, 0x3d, 0x3e, 0x22, 0xfe, 0x46, 0x11, 0x4d, 0xe8, 0x0a, 0x9f, 0x02, 0x04,
	0x74, 0x83, 0xf8, 0xe9, 0xae, 0x4b, 0x79, 0x52, 0x0b, 0xf0, 0xee, 0x10, 0xc0, 0x38, 0x98, 0x99,
	0xe9, 0x50, 0x7b, 0x44, 0x69, 0x4c, 0x29, 0xc6, 0x5d, 0x86, 0xa1, 0x45, 0x3e, 0x90, 0xda, 0x7d,
	0x5c, 0x76, 0xf9, 0x27, 0xc2, 0xf0, 0xdc, 0x98, 0x19, 0x96, 0xb2, 0x4f, 0x14, 0x40, 0x68, 0x46,
	0x40, 0xad, 0x48, 0x0a, 0x3d, 0xce, 0xa5, 0xfb, 0x84, 0x84, 0xf0, 0x74, 0xef, 0x19, 0xb1, 0x04,
	0x73, 0x09, 0xee, 0xd3, 0x29, 0xe1, 0x13, 0x23, 0x7c, 0x23, 0x5a, 0xf8, 0x23, 0x91, 0x8b, 0xc4,
	0xf8, 0xe7, 0x19, 0x3b, 0x11, 0xf1, 0x0b, 0x84, 0xd9, 0x47, 0x5f, 0x82, 0xcd, 0x08, 0x3f, 0x56,
	0x91, 0x64, 0xd7, 0x3c, 0x27, 0xd7, 0xd8, 0x7c, 0xfb, 0xa8, 0x22, 0x49, 0x2e, 0x7a, 0x03, 0x4e,
	0x29, 0x18, 0xf0, 0x0b, 0x90, 0xdc, 0x21, 0x72, 0x7b, 0x16, 0x11, 0x5a, 0x10, 0xfb, 0x6b, 0x78,
	0x58, 0x50, 0x01, 0xa2, 0xf4, 0x0e, 0x44, 0xea, 0x27, 0xd9, 0xb5, 0x74, 0x5f, 0x50, 0x5a, 0xb4,
	0xc9, 0x84, 0xe9, 0x7d, 0x22, 0xd2, 0xf3, 0xec, 0x5a, 0xce, 0x27, 0xda, 0x08, 0x2b, 0xd1, 0x01,
	0xfb, 0xce, 0x26, 0xda, 0x05, 0x56, 0xa4, 0xe7, 0x50, 0xe7, 0x4d, 0x8b, 0x6c, 0x9c, 0x86, 0xee,
	0x4b, 0xf6, 0x1d, 0x41, 0x97, 0x88, 0x60, 0x92, 0x30, 0xc1, 0x9e, 0x94, 0x89, 0xaf, 0x38, 0x49,
	0xc8, 0x64, 0x9c, 0xc4, 0xfc, 0x7d, 0xa8, 0x61, 0x44, 0x30, 0xeb, 0x33, 0xce, 0xb8, 0x22, 0x9a,
	0xb0, 0xf1, 0x1b, 0xd8, 0x5e, 0xac, 0x68, 0x72, 0xe2, 0x7e, 0x4e, 0x3c, 0xe7, 0x76, 0x4d, 0x93,
	0x14, 0x60, 0xf8, 0x06, 0x7e, 0xb2, 0xfb, 0x05, 0xb1, 0x36, 0x46, 0xb9, 0xc4, 0xef, 0xc4, 0x02,
	0x66, 0x4d, 0x36, 0xfc, 0xbb, 0xc4, 0x68, 0x1a, 0x86, 0x49, 0x80, 0x7d, 0xa8, 0xe1, 0xe7, 0xf3,
	0x1e, 0xaf, 0xf9, 0x44, 0x08, 0xd0, 0x26, 0x5d, 0x68, 0x4f, 0x8d, 0x76, 0x97, 0x2f, 0xf9, 0x62,
	0x2d, 0xa7, 0xb4, 0xcd, 0xb8, 0x1f, 0xab, 0xc0, 0x0f, 0x42, 0xf7, 0x2b, 0xba, 0xa3, 0x4d, 0x06,
	0x4e, 0x42, 0xbc, 0x9b, 0x79, 0x67, 0xf3, 0x55, 0xbe, 0xe1, 0xab, 0x2c, 0x7b, 0x9c, 0xae, 0xf2,
	0x35, 0xb4, 0x39, 0x58, 0x13, 0x31, 0xf1, 0x07, 0x79, 0xf6, 0x37, 0x3d, 0x74, 0xbf, 0x26, 0xd5,
	0xad, 0x29, 0xfe, 0x23, 0xc1, 0x07, 0xff, 0x5c, 0x85, 0xf6, 0xe5, 0x95, 0x8a, 0x63, 0x74, 0xc8,
	0x5d, 0xbd, 0xe7, 0x15, 0xb4, 0x52, 0x91, 0x48, 0x7f, 0x10, 0x67, 0x7d, 0x11, 0x63, 0xad, 0xab,
	0xf0, 0x5d, 0x23, 0xfa, 0x23, 0x81, 0x67, 0xa1, 0x73, 0x00, 0xcd, 0x50, 0x16, 0x25, 0xd2, 0x2a,
	0x57, 0x8b, 0x50, 0x16, 0x53, 0x8e, 0x03, 0x6b, 0x2a, 0xc8, 0x52, 0xd3, 0x93, 0xe8, 0x19, 0xbf,
	0x5c, 0x50, 0xff, 0xc3, 0x77, 0xaa, 0x24, 0xba, 0xc9, 0xc0, 0x59, 0x88, 0x69, 0x3e, 0x12, 0x45,
	0x61, 0xac, 0xeb, 0x9c, 0xe6, 0x06, 0xe1, 0x5e, 0x10, 0xcb, 0x6b, 0x19, 0xfb, 0x89, 0x98, 0xb8,
	0x1b, 0xd4, 0x0a, 0x37, 0x09, 0x38, 0x17, 0x13, 0xe7, 0x33, 0x68, 0x15, 0x3a, 0x97, 0xe9, 0x40,
	0x0f, 0xfd, 0x5c, 0x68, 0x79, 0xe4, 0x6e, 0x92, 0xc3, 0x9a, 0x16, 0xf5, 0x10, 0x5c, 0xa0, 0xf5,
	0xa8, 0xa9, 0xdc, 0xa2, 0xf5, 0x16, 0x68, 0xc7, 0xa6, 0xb3, 0xcc, 0xd1, 0x8e, 0xa9, 0x5a, 0xc8,
	0xfe, 0x78, 0xe0, 0xd3, 0x31, 0xdc, 0x3a, 0x9d, 0x09, 0x08, 0xfa, 0x88, 0x08, 0xd6, 0x54, 0xf3,
	0xb9, 0xcc, 0x68, 0x10, 0xa3, 0xce, 0x18, 0x51, 0x0e, 0xfe, 0xb7, 0x06, 0x3b, 0x78, 0x1f, 0x27,
	0x43, 0xbc, 0x59, 0x6c, 0x7b, 0x77, 0xdd, 0x8c, 0x03, 0x6b, 0xd4, 0xe3, 0xf9, 0x3e, 0xe8, 0x19,
	0x39, 0x57, 0x47, 0xe4, 0xfc, 0x8a, 0x57, 0xb9, 0x3a, 0xa2, 0x75, 0x8f, 0x3c, 0x8e, 0xeb, 0x1e,
	0xad, 0x8f, 0xc9, 0xd1, 0xb8, 0x3e, 0x46, 0x1f, 0x72, 0x7d, 0xc3, 0x8d, 0xd8, 0xc3, 0x9b, 0x54,
	0xdd, 0x70, 0xb3, 0x5d, 0x58, 0x37, 0x49, 0xb4, 0x41, 0x12, 0x66, 0xe5, 0xb8, 0xb0, 0xc1, 0x4f,
	0x3d, 0x72, 0x6a, 0xcd, 0xb3, 0x4b, 0x0c, 0x16, 0xda, 0xae, 0xd0, 0x22, 0xd7, 0xa5, 0x1e, 0xdd,
	0x40, 0xf4, 0x12, 0x41, 0xec, 0xd3, 0x7b, 0x40, 0x1a, 0x64, 0x87, 0xd9, 0x06, 0x68, 0xea, 0x40,
	0x83, 0x4d, 0x69, 0x48, 0xe6, 0xfa, 0xac, 0xe0, 0x9e, 0xa6, 0x21, 0x32, 0x30, 0xd2, 0xcc, 0xcb,
	0xfe, 0x28, 0xcf, 0xfa, 0xe4, 0xc3, 0x8a, 0x57, 0x37, 0x3b, 0x5c, 0xe4, 0x59, 0x7f, 0xf6, 0x55,
	0x98, 0x28, 0x4d, 0xce, 0x27, 0xfa, 0x2a, 0x4c, 0x10, 0x2b, 0x31, 0x54, 0xda, 0x8f, 0x62, 0xdb,
	0x93, 0x49, 0xe2, 0x83, 0xd2, 0xef, 0xe3, 0x1b, 0xbc, 0x46, 0x1a, 0x0e, 0x52, 0xae, 0xe9, 0x5b,
	0x7c, 0x8d, 0x08, 0xfd, 0xc4, 0x35, 0xdd, 0x46, 0x72, 0xbb, 0x14, 0xc9, 0xaf, 0xa0, 0x59, 0x8c,
	0x47, 0x32, 0x1f, 0x65, 0x05, 0x15, 0x19, 0xea, 0xbe, 0x55, 0x6f, 0x1e, 0xc4, 0xa6, 0x83, 0x6c,
	0x7f, 0xca, 0x72, 0xd8, 0x3f, 0x08, 0x5e, 0x58, 0x92, 0x03, 0x6b, 0x89, 0xc8, 0xaf, 0x4c, 0xc7,
	0xa5, 0x67, 0xac, 0xe7, 0xf8, 0xd7, 0x17, 0x54, 0x31, 0x64, 0x48, 0x61, 0x48, 0xcd, 0xb6, 0xea,
	0xb5, 0xd1, 0xf2, 0xd6, 0x18, 0x30, 0x12, 0xf1, 0x0b, 0x38, 0xf5, 0xd1, 0x45, 0x23, 0x6a, 0xb7,
	0x35, 0x0f, 0x18, 0xba, 0xc8, 0xb3, 0xd1, 0xc1, 0xbf, 0xd7, 0xe0, 0xe1, 0x05, 0x67, 0xd2, 0xbd,
	0x93, 0xe7, 0x6b, 0x68, 0x9b, 0x80, 0x9d, 0x16, 0x56, 0x13, 0x6f, 0x5b, 0x8c, 0x4f, 0x8b, 0x2a,
	0x6a, 0x1a, 0x2a, 0xb9, 0x9d, 0x63, 0x10, 0x18, 0x22, 0xc7, 0x7f, 0x35, 0x6b, 0x5f, 0xb3, 0xcd,
	0xcc, 0x80, 0x6a, 0x0c, 0xb3, 0xdd, 0xfe, 0x08, 0x8f, 0x16, 0xc8, 0xdc, 0x22, 0xcd, 0x94, 0xba,
	0x73, 0xfb, 0x15, 0x6a, 0x94, 0xce, 0xef, 0x66, 0xa3, 0x2a, 0x46, 0x87, 0xe8, 0xab, 0x58, 0xe9,
	0x1b, 0x0a, 0xed, 0x8a, 0x67, 0x5b, 0xe2, 0xc5, 0xcc, 0x82, 0x45, 0x66, 0x2a, 0x14, 0x9a, 0x32,
	0x52, 0xb3, 0x7b, 0x87, 0x98, 0xf9, 0x41, 0x96, 0x24, 0x22, 0x0d, 0xed, 0x0c, 0xc0, 0x21, 0xdf,
	0x34, 0xa8, 0x19, 0x03, 0x5c, 0xd8, 0x30, 0x80, 0x89, 0x78, 0xbb, 0xc4, 0xcb, 0xa4, 0xd9, 0x1a,
	0xc8, 0xa7, 0xf4, 0x8c, 0x9d, 0x21, 0xbb, 0x96, 0x79, 0xae, 0x42, 0x49, 0x6d, 0xca, 0xbf, 0x3a,
	0x32, 0xc5, 0xa2, 0x65, 0x71, 0x2c, 0x01, 0x7f, 0x39, 0x5a, 0xc2, 0xec, 0x99, 0xa2, 0x31, 0xcf,
	0xec, 0x2d, 0x61, 0x1e, 0x53, 0xe8, 0xdf, 0x66, 0x1e, 0x63, 0x28, 0xcd, 0x33, 0xe9, 0xbe, 0x5a,
	0x1c, 0x4a, 0x65, 0x2e, 0xdd, 0xda, 0x2e, 0xac, 0xcf, 0x8d, 0xa4, 0x66, 0xe5, 0x6c, 0x43, 0xb5,
	0x08, 0xb2, 0x5c, 0x52, 0x12, 0x54, 0x3d, 0x5e, 0x1c, 0xfc, 0x6b, 0x0d, 0x1e, 0x9e, 0xe4, 0x52,
	0x68, 0xc9, 0x83, 0xd6, 0x5d, 0x71, 0xb5, 0x0d, 0xd5, 0x51, 0xa6, 0x52, 0x6d, 0x82, 0x89, 0x17,
	0x98, 0x1d, 0xc3, 0x2c, 0x57, 0x7f, 0xcf, 0xec, 0x9c, 0xc8, 0x41, 0xd4, 0x30, 0x20, 0x4f, 0x41,
	0xaf, 0xa1, 0x6d, 0xd6, 0x5a, 0xc4, 0x3e, 0xf5, 0x3f, 0x53, 0xe0, 0xb6, 0x66, 0xb8, 0x87, 0x30,
	0x4f, 0xc4, 0x22, 0x90, 0x7e, 0xa2, 0x8a, 0x42, 0xc5, 0xd2, 0x14, 0xbe, 0x06, 0x81, 0xe7, 0x8c,
	0x39, 0x5f, 0xc0, 0x16, 0xc6, 0x55, 0x3f, 0x8b, 0x85, 0x3f, 0x94, 0x6a, 0x30, 0xd4, 0x26, 0x5a,
	0x5a, 0x16, 0xfe, 0x40, 0x28, 0x16, 0xef, 0x29, 0xb1, 0xc8, 0x03, 0xfa, 0x49, 0x53, 0xf1, 0xea,
	0x16, 0xbb, 0xcc, 0x03, 0x9a, 0x1b, 0x2c, 0x25, 0xd0, 0x79, 0xec, 0x1f, 0xd1, 0x4f, 0x99, 0x8a,
	0xd7, 0xb4, 0xf0, 0x89, 0xce, 0xe3, 0xa3, 0x45, 0x1e, 0xf6, 0x9d, 0x05, 0x5e, 0x6f, 0x4e, 0x32,
	0x94, 0x85, 0x0b, 0xf3, 0x92, 0xef, 0x64, 0x81, 0x43, 0x21, 0x9f, 0xda, 0xcf, 0xa2, 0xa8, 0x90,
	0xda, 0x4f, 0x54, 0x4a, 0xc1, 0x84, 0xfe, 0x20, 0xc3, 0xcf, 0x84, 0x9f, 0xab, 0x74, 0x09, 0x57,
	0x4c, 0x4c, 0xfd, 0x9c, 0xe7, 0x8a, 0x09, 0x8d, 0xa5, 0xb2, 0x60, 0xff, 0x1a, 0xba, 0x29, 0xa5,
	0xad, 0x50, 0x16, 0xe4, 0x5f, 0x26, 0xd3, 0x6f, 0x1d, 0x11, 0xc7, 0xaa, 0xd0, 0x38, 0xc0, 0x88,
	0x38, 0xe0, 0xda, 0xd4, 0x22, 0xf2, 0x83, 0xa9, 0xe9, 0x44, 0xc4, 0x01, 0x16, 0xa7, 0x83, 0xff,
	0xac, 0x80, 0x43, 0x63, 0x87, 0x4f, 0x1d, 0xef, 0xae, 0x10, 0xc1, 0xf9, 0x9f, 0x58, 0x66, 0xe4,
	0x68, 0x7a, 0x1b, 0xb4, 0x3e, 0x0b, 0xb1, 0xd4, 0x70, 0xe7, 0xa7, 0x3e, 0x63, 0x7e, 0x06, 0x03,
	0x41, 0xd4, 0x64, 0x66, 0xa3, 0x81, 0x4c, 0x43, 0x0a, 0x0e, 0x3b, 0x1a, 0x9c, 0xa6, 0x21, 0xfe,
	0xac, 0x4b, 0x84, 0x96, 0xb9, 0x12, 0x71, 0xe1, 0x56, 0x3b, 0xab, 0x38, 0x55, 0x4c, 0x81, 0xd9,
	0xde, 0xb1, 0x4a, 0x14, 0x87, 0x82, 0xdd, 0xfb, 0x23, 0x22, 0x58, 0x30, 0x72, 0x91, 0x5e, 0x19,
	0xbb, 0x29, 0x18, 0x88, 0x90, 0xf9, 0xe0, 0xbf, 0x00, 0x0f, 0xca, 0x25, 0xd5, 0xa7, 0x5f, 0xd0,
	0x05, 0xb8, 0x8b, 0xbf, 0xf3, 0x7d, 0xa5, 0x65, 0x52, 0xb8, 0x2b, 0x9d, 0xd5, 0x6e, 0xbd, 0xf7,
	0xa7, 0xc3, 0xd9, 0xff, 0x05, 0x0e, 0x17, 0x36, 0x38, 0x2c, 0xbd, 0xcd, 0xf0, 0x19, 0xbe, 0x7b,
	0x9a, 0xea, 0xfc, 0xc6, 0xdb, 0x5d, 0x6e, 0x74, 0x12, 0xd8, 0xbd, 0x3d, 0xde, 0x19, 0xc9, 0x0a,
	0x49, 0x7e, 0x7b, 0xbf, 0xe4, 0xf4, 0xdd, 0x05, 0xc1, 0xed, 0x65, 0x26, 0xe7, 0x1f, 0xb0, 0xbf,
	0x74, 0x70, 0x31, 0x9a, 0xab, 0xa4, 0xf9, 0xe7, 0xfb, 0x35, 0xe7, 0x37, 0x58, 0x10, 0xde, 0xbb,
	0xd3, 0xee, 0x5c, 0xc3, 0xde, 0x92, 0x86, 0x66, 0xb4, 0xd7, 0x48, 0xfb, 0xfb, 0xfb, 0xb5, 0xcb,
	0xaf, 0x2f, 0x28, 0x3f, 0xba, 0xc3, 0x8a, 0xba, 0x4b, 0x0a, 0x9e, 0xd1, 0xad, 0xfe, 0x1a, 0xdd,
	0xf2, 0xeb, 0x8b, 0xba, 0x77, 0x58, 0x9d, 0xbf, 0x82, 0xbb, 0x98, 0x44, 0x46, 0x76, 0x9d, 0x64,
	0xbf, 0xfb, 0x15, 0xd7, 0x4b, 0x2f, 0x2f, 0x88, 0xee, 0x2c, 0xb5, 0x3d, 0x56, 0xb0, 0x7f, 0x4f,
	0x18, 0xe2, 0x4f, 0xf8, 0x2b, 0x79, 0x63, 0x32, 0x18, 0x1f, 0x9d, 0xdf, 0x43, 0xf5, 0x5a, 0xc4,
	0x63, 0x1e, 0x51, 0xeb, 0xbd, 0x67, 0xe5, 0x03, 0x2d, 0xa6, 0x83, 0xc7, 0xe4, 0xef, 0x2b, 0xdf,
	0xad, 0x3c, 0x96, 0xb0, 0x77, 0x67, 0xf8, 0x2d, 0x11, 0xea, 0xcd, 0x0b, 0x3d, 0x99, 0xfb, 0xf2,
	0x5b, 0x29, 0x50, 0x96, 0xc9, 0xe0, 0xd9, 0xfd, 0x11, 0xb7, 0x44, 0xeb, 0xdb, 0x79, 0xad, 0x17,
	0x65, 0xad, 0xa5, 0xf1, 0x5f, 0x16, 0xbc, 0x82, 0x27, 0xf7, 0x85, 0xd9, 0x12, 0xb9, 0x3f, 0xcc,
	0xcb, 0x3d, 0x2f, 0xcb, 0x2d, 0x09, 0xf8, 0x5b, 0x62, 0xf7, 0xc5, 0xd6, 0x6f, 0x14, 0x5b, 0x12,
	0xe5, 0x65, 0xb1, 0x21, 0x3c, 0xbe, 0x3b, 0xa2, 0x7e, 0x63, 0x6c, 0x2c, 0x06, 0x76, 0x49, 0xe9,
	0x87, 0x97, 0xf0, 0x22, 0xc8, 0x92, 0x43, 0x9d, 0xab, 0x54, 0x69, 0x35, 0x10, 0x89, 0x2c, 0x0e,
	0x0b, 0x99, 0x5f, 0xcb, 0xfc, 0x30, 0xc8, 0xd2, 0xe8, 0x50, 0x8c, 0x75, 0xd6, 0x5f, 0xa7, 0x7f,
	0xb6, 0x1e, 0xff, 0x12, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x51, 0xed, 0x24, 0x82, 0x15, 0x00, 0x00,
}
