// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Heroes_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConfigData {

  /// <summary>Holder for reflection information generated from Heroes_Config.proto</summary>
  public static partial class HeroesConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Heroes_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HeroesConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNIZXJvZXNfQ29uZmlnLnByb3RvEgpDb25maWdEYXRhIo4CChFBcHBlYXJh",
            "bmNlX0NvbmZpZxIKCgJpZBgBIAEoDRITCgtmb2xkZXJfbmFtZRgCIAEoCRIM",
            "CgRtZXNoGAMgASgJEg8KB3RleHR1cmUYBCABKAkSDwoHYW5pbV9pZBgFIAEo",
            "DRIRCgliYWtlX21lc2gYBiABKAgSEQoJc2NhbGVfbWFwGAcgASgCEhUKDXNj",
            "YWxlX2xvYWRpbmcYCCABKAISEQoJYXRrX3NvdW5kGAkgASgJEhMKC3Jhbmdl",
            "X3NvdW5kGAogASgJEhcKD3JhbmdlX2hpdF9zb3VuZBgLIAEoCRIUCgxjaGFy",
            "Z2Vfc291bmQYDCABKAkSFAoMZGVhdGhfZWZmZWN0GA0gASgJIkYKFkFwcGVh",
            "cmFuY2VfQ29uZmlnX0RhdGESLAoFaXRlbXMYASADKAsyHS5Db25maWdEYXRh",
            "LkFwcGVhcmFuY2VfQ29uZmlnItcHCg1IZXJvZXNfQ29uZmlnEgoKAmlkGAEg",
            "ASgNEgwKBGRlc2MYAiABKAkSEwoLZGVidWdfbGV2ZWwYAyABKA0SEwoLZGVi",
            "dWdfZmxvb3IYBCABKA0SHgoWZGVidWdfcGF3bl9jb3VudF9sZXZlbBgFIAEo",
            "DRISCgpkZWJ1Z19yYW5rGAYgASgNEhQKDGRlYnVnX3RhbGVudBgHIAMoDRIY",
            "ChBoZXJvX25hbWVfZ2xvYmFsGAggASgJEhYKDmljb25fZm9ybWF0aW9uGAkg",
            "ASgJEhEKCWljb25fZmxhZxgKIAEoCRIaChJ0ZWFtX2Jhbm5lcl9oZWlnaHQY",
            "CyABKAUSEAoIY2xhc3NpZnkYDCABKA0SEQoJaGVyb190eXBlGA0gASgNEg8K",
            "B3F1YWxpdHkYDiABKA0SFQoNcHJvamVjdGlsZV9pZBgPIAEoDRIVCg10ZWFt",
            "bG9pZ2ljX2lkGBAgASgNEg4KBnNraWxscxgRIAMoDRIMCgRtYXNzGBIgASgC",
            "EhUKDXBoeXNpY19yYWRpdXMYEyADKAISDQoFc2NhbGUYFCABKAISFAoMc2hh",
            "ZG93X3NjYWxlGBUgAygCEhMKC2Nhbl9jYXB0dXJlGBYgASgIEhgKEGhlcm9f",
            "c291bmRfc2hvcnQYFyABKAkSEQoJbWVsZWVfZHBzGBggASgCEhMKC21lbGVl",
            "X3NwZWVkGBkgASgCEhQKDG1lbGVlX3JhZGl1cxgaIAEoAhIYChBtZWxlZV9o",
            "aXRfZWZmZWN0GBsgAygJEhEKCXJhbmdlX2RwcxgcIAEoAhITCgtyYW5nZV9z",
            "cGVlZBgdIAEoAhIUCgxyYW5nZV9yYWRpdXMYHiABKAISGAoQcmFuZ2VfaGl0",
            "X2VmZmVjdBgfIAMoCRISCgpjaGFyZ2VfZG1nGCAgASgCEhoKEmNoYXJnZV9h",
            "bmltX2VmZmVjdBghIAEoCRIeChZjaGFyZ2VfYW5pbV9lZmZlY3RfaGl0GCIg",
            "ASgJEhYKDmZvY3VzX2FsdGl0dWRlGCMgASgCEhIKCmNyaV9kYW1hZ2UYJCAB",
            "KAISEwoLZnVsbF90YWxlbnQYJSABKAgSFAoMY2F0Y2hfcmV3YXJkGCYgASgN",
            "EhYKDmhlcm9fZGV2aWF0aW9uGCcgASgJEhQKDGhlcm9fcHJvZmlsZRgoIAEo",
            "CRIYChBtYXhfYWN0aW9uX3BvaW50GCkgASgNEg4KBm1vcmFsZRgqIAEoDRIS",
            "Cgptb3JhbGVfYXRrGCsgASgNEhIKCm1vcmFsZV9kZWYYLCABKA0SEwoLZGVh",
            "ZF9tb3JhbGUYLSABKA0iPgoSSGVyb2VzX0NvbmZpZ19EYXRhEigKBWl0ZW1z",
            "GAEgAygLMhkuQ29uZmlnRGF0YS5IZXJvZXNfQ29uZmlnIoABChJIZXJvc19X",
            "b3Jkc19Db25maWcSCgoCaWQYASABKA0SGgoSYmF0dGxlX3N0YXJ0X3dvcmRz",
            "GAIgAygJEhQKDGNoYXJnZV93b3JkcxgDIAMoCRIYChBjYXN0X3NwZWxsX3dv",
            "cmRzGAQgAygJEhIKCmxhc3Rfd29yZHMYBSADKAkiSAoXSGVyb3NfV29yZHNf",
            "Q29uZmlnX0RhdGESLQoFaXRlbXMYASADKAsyHi5Db25maWdEYXRhLkhlcm9z",
            "X1dvcmRzX0NvbmZpZyLCAwoSSGVyb2VzX0RhdGFfQ29uZmlnEgoKAmlkGAEg",
            "ASgNEg8KB2hlcm9faWQYAiABKA0SDQoFZmxvb3IYAyABKAUSDwoHaHBfYmFz",
            "ZRgEIAEoAhIRCglocF9ncm93dGgYBSABKAISEwoLYXR0YWNrX2Jhc2UYBiAB",
            "KAISFQoNYXR0YWNrX2dyb3d0aBgHIAEoAhIYChByZWFsX2F0dGFja19iYXNl",
            "GAggASgCEhoKEnJlYWxfYXR0YWNrX2dyb3d0aBgJIAEoAhIUCgxkZWZlbmNl",
            "X2Jhc2UYCiABKAISFgoOZGVmZW5jZV9ncm93dGgYCyABKAISEgoKZG9kZ2Vf",
            "YmFzZRgMIAEoAhIUCgxkb2RnZV9ncm93dGgYDSABKAISFQoNY3JpdGljYWxf",
            "YmFzZRgOIAEoAhIXCg9jcml0aWNhbF9ncm93dGgYDyABKAISGQoRY29ucXVl",
            "cl90aW1lX2Jhc2UYECABKAISGwoTY29ucXVlcl90aW1lX2dyb3d0aBgRIAEo",
            "AhIRCgltYXhfbGV2ZWwYEiABKAUSFAoMdXBfbWF0ZXJpYWxzGBMgAygNEhEK",
            "CXBsYXllcl9sdhgUIAEoBSJIChdIZXJvZXNfRGF0YV9Db25maWdfRGF0YRIt",
            "CgVpdGVtcxgBIAMoCzIeLkNvbmZpZ0RhdGEuSGVyb2VzX0RhdGFfQ29uZmln",
            "IrwBChNIZXJvZXNfU2tpbGxfQ29uZmlnEgoKAmlkGAEgASgNEg8KB2hlcm9f",
            "aWQYAiABKA0SEgoKc2tpbGxfc2xvdBgDIAEoDRIPCgdxdWFsaXR5GAQgASgN",
            "EhIKCm5lZWRfbGV2ZWwYBSABKA0SEQoJbmVlZF9yYW5rGAYgASgFEhMKC3Nr",
            "aWxsX3RhYmxlGAcgAygNEhEKCW1hdGVyaWFscxgIIAMoDRIUCgx1cF9tYXRl",
            "cmlhbHMYCSADKA0iSgoYSGVyb2VzX1NraWxsX0NvbmZpZ19EYXRhEi4KBWl0",
            "ZW1zGAEgAygLMh8uQ29uZmlnRGF0YS5IZXJvZXNfU2tpbGxfQ29uZmlnIoUC",
            "ChJIZXJvZXNfUmFua19Db25maWcSCgoCaWQYASABKA0SDwoHaGVyb19pZBgC",
            "IAEoDRIMCgRyYW5rGAMgASgNEgsKA2V4cBgEIAEoDRITCgtsZXZlbF9saW1p",
            "dBgFIAEoDRIKCgJocBgGIAEoAhIOCgZhdHRhY2sYByABKAISEwoLcmVhbF9h",
            "dHRhY2sYCCABKAISDwoHZGVmZW5jZRgJIAEoAhINCgVkb2RnZRgKIAEoAhIQ",
            "Cghjcml0aWNhbBgLIAEoAhIWCg5oZXJvX2FwcGVhcl9pZBgMIAEoDRISCgpz",
            "b2xpZGVyX2lkGA0gASgNEhMKC3NwZWxsX2NvdW50GA4gASgNIkgKF0hlcm9l",
            "c19SYW5rX0NvbmZpZ19EYXRhEi0KBWl0ZW1zGAEgAygLMh4uQ29uZmlnRGF0",
            "YS5IZXJvZXNfUmFua19Db25maWcihAMKEFNvbG9fSGVyb19Db25maWcSCgoC",
            "aWQYASABKA0SFQoNam95c3RpY2tfbW9kZRgCIAEoDRIRCglwb3dlcl9tYXgY",
            "AyABKA0SFQoNcG93ZXJfcmVjb3ZlchgEIAMoAhIRCgljb21ib19hdGsYBSAD",
            "KAISEgoKc3BlZWRfcmF0ZRgGIAEoAhIRCglhdGtfcmFuZ2UYByABKAISEQoJ",
            "ZG1nX3JhbmdlGAggAygCEhEKCWRtZ19hbmdsZRgJIAMoAhIZChFzb2xvX3No",
            "YWtlX2VmZmVjdBgKIAMoCRIbChNzb2xvX3RyaWdnZXJfZWZmZWN0GAsgAygJ",
            "EhQKDHNvbG9faGl0X2ZseRgMIAMoCRIYChBzb2xvX3NoYWtlX3NvdW5kGA0g",
            "AygJEhoKEnNvbG9fdHJpZ2dlcl9zb3VuZBgOIAEoCRIWCg5jb29sZG93bl9k",
            "ZWxheRgPIAMoAhIRCglldmFkZV9kaXMYECABKAISFAoMY2FtZXJhX3NoYWtl",
            "GBEgAygJIkQKFVNvbG9fSGVyb19Db25maWdfRGF0YRIrCgVpdGVtcxgBIAMo",
            "CzIcLkNvbmZpZ0RhdGEuU29sb19IZXJvX0NvbmZpZyLIAgoXU29sb19IZXJv",
            "ZXNfRGF0YV9Db25maWcSCgoCaWQYASABKA0SEwoLZGVidWdfbGV2ZWwYAiAB",
            "KA0SDwoHaHBfYmFzZRgDIAEoAhIRCglocF9ncm93dGgYBCABKAISEwoLYXR0",
            "YWNrX2Jhc2UYBSABKAISFQoNYXR0YWNrX2dyb3d0aBgGIAEoAhIYChByZWFs",
            "X2F0dGFja19iYXNlGAcgASgCEhoKEnJlYWxfYXR0YWNrX2dyb3d0aBgIIAEo",
            "AhIUCgxkZWZlbmNlX2Jhc2UYCSABKAISFgoOZGVmZW5jZV9ncm93dGgYCiAB",
            "KAISEgoKZG9kZ2VfYmFzZRgLIAEoAhIUCgxkb2RnZV9ncm93dGgYDCABKAIS",
            "FQoNY3JpdGljYWxfYmFzZRgNIAEoAhIXCg9jcml0aWNhbF9ncm93dGgYDiAB",
            "KAIiUgocU29sb19IZXJvZXNfRGF0YV9Db25maWdfRGF0YRIyCgVpdGVtcxgB",
            "IAMoCzIjLkNvbmZpZ0RhdGEuU29sb19IZXJvZXNfRGF0YV9Db25maWcinQIK",
            "EFVJX0hlcm9lc19Db25maWcSCgoCaWQYASABKA0SGAoQaGVyb19lcGljX2ds",
            "b2JhbBgCIAEoCRIMCgRUeXBlGAMgASgJEgwKBGhpZGUYBCABKAgSDQoFc2Nh",
            "bGUYBSABKAISCwoDcm90GAYgASgJEhAKCHBvc2l0aW9uGAcgASgJEg0KBWVx",
            "dWlwGAggASgJEg8KB2NhcmRfaWQYCSABKA0SEwoLc3VtbW9uX2Nvc3QYCiAB",
            "KA0SFAoMbGV2ZWx1cF9nb2xkGAsgASgNEhIKCmhlcm9fc291bmQYDCABKAkS",
            "GQoRdGFsZW50X2Nvc3RfcnJhdGUYDSABKAISEgoKcnJhdGVfZ3JvdxgOIAEo",
            "AhILCgNzZngYDyABKAkiRAoVVUlfSGVyb2VzX0NvbmZpZ19EYXRhEisKBWl0",
            "ZW1zGAEgAygLMhwuQ29uZmlnRGF0YS5VSV9IZXJvZXNfQ29uZmlnIk0KEkhl",
            "cm9lc19UeXBlX0NvbmZpZxIKCgJpZBgBIAEoDRIRCglIZXJvX0ljb24YAiAB",
            "KAkSGAoQZ2xvYmFsX3N0cmluZ19pZBgDIAEoCSJIChdIZXJvZXNfVHlwZV9D",
            "b25maWdfRGF0YRItCgVpdGVtcxgBIAMoCzIeLkNvbmZpZ0RhdGEuSGVyb2Vz",
            "X1R5cGVfQ29uZmlnQiMKIWNvbS50cmluaXRpZ2FtZXMuc2VydmVyLmNvbmYu",
            "YXV0b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Appearance_Config), global::ConfigData.Appearance_Config.Parser, new[]{ "Id", "FolderName", "Mesh", "Texture", "AnimId", "BakeMesh", "ScaleMap", "ScaleLoading", "AtkSound", "RangeSound", "RangeHitSound", "ChargeSound", "DeathEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Appearance_Config_Data), global::ConfigData.Appearance_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Config), global::ConfigData.Heroes_Config.Parser, new[]{ "Id", "Desc", "DebugLevel", "DebugFloor", "DebugPawnCountLevel", "DebugRank", "DebugTalent", "HeroNameGlobal", "IconFormation", "IconFlag", "TeamBannerHeight", "Classify", "HeroType", "Quality", "ProjectileId", "TeamloigicId", "Skills", "Mass", "PhysicRadius", "Scale", "ShadowScale", "CanCapture", "HeroSoundShort", "MeleeDps", "MeleeSpeed", "MeleeRadius", "MeleeHitEffect", "RangeDps", "RangeSpeed", "RangeRadius", "RangeHitEffect", "ChargeDmg", "ChargeAnimEffect", "ChargeAnimEffectHit", "FocusAltitude", "CriDamage", "FullTalent", "CatchReward", "HeroDeviation", "HeroProfile", "MaxActionPoint", "Morale", "MoraleAtk", "MoraleDef", "DeadMorale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Config_Data), global::ConfigData.Heroes_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heros_Words_Config), global::ConfigData.Heros_Words_Config.Parser, new[]{ "Id", "BattleStartWords", "ChargeWords", "CastSpellWords", "LastWords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heros_Words_Config_Data), global::ConfigData.Heros_Words_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Data_Config), global::ConfigData.Heroes_Data_Config.Parser, new[]{ "Id", "HeroId", "Floor", "HpBase", "HpGrowth", "AttackBase", "AttackGrowth", "RealAttackBase", "RealAttackGrowth", "DefenceBase", "DefenceGrowth", "DodgeBase", "DodgeGrowth", "CriticalBase", "CriticalGrowth", "ConquerTimeBase", "ConquerTimeGrowth", "MaxLevel", "UpMaterials", "PlayerLv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Data_Config_Data), global::ConfigData.Heroes_Data_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Skill_Config), global::ConfigData.Heroes_Skill_Config.Parser, new[]{ "Id", "HeroId", "SkillSlot", "Quality", "NeedLevel", "NeedRank", "SkillTable", "Materials", "UpMaterials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Skill_Config_Data), global::ConfigData.Heroes_Skill_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Rank_Config), global::ConfigData.Heroes_Rank_Config.Parser, new[]{ "Id", "HeroId", "Rank", "Exp", "LevelLimit", "Hp", "Attack", "RealAttack", "Defence", "Dodge", "Critical", "HeroAppearId", "SoliderId", "SpellCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Rank_Config_Data), global::ConfigData.Heroes_Rank_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Solo_Hero_Config), global::ConfigData.Solo_Hero_Config.Parser, new[]{ "Id", "JoystickMode", "PowerMax", "PowerRecover", "ComboAtk", "SpeedRate", "AtkRange", "DmgRange", "DmgAngle", "SoloShakeEffect", "SoloTriggerEffect", "SoloHitFly", "SoloShakeSound", "SoloTriggerSound", "CooldownDelay", "EvadeDis", "CameraShake" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Solo_Hero_Config_Data), global::ConfigData.Solo_Hero_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Solo_Heroes_Data_Config), global::ConfigData.Solo_Heroes_Data_Config.Parser, new[]{ "Id", "DebugLevel", "HpBase", "HpGrowth", "AttackBase", "AttackGrowth", "RealAttackBase", "RealAttackGrowth", "DefenceBase", "DefenceGrowth", "DodgeBase", "DodgeGrowth", "CriticalBase", "CriticalGrowth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Solo_Heroes_Data_Config_Data), global::ConfigData.Solo_Heroes_Data_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.UI_Heroes_Config), global::ConfigData.UI_Heroes_Config.Parser, new[]{ "Id", "HeroEpicGlobal", "Type", "Hide", "Scale", "Rot", "Position", "Equip", "CardId", "SummonCost", "LevelupGold", "HeroSound", "TalentCostRrate", "RrateGrow", "Sfx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.UI_Heroes_Config_Data), global::ConfigData.UI_Heroes_Config_Data.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Type_Config), global::ConfigData.Heroes_Type_Config.Parser, new[]{ "Id", "HeroIcon", "GlobalStringId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Heroes_Type_Config_Data), global::ConfigData.Heroes_Type_Config_Data.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Appearance_Config : pb::IMessage<Appearance_Config> {
    private static readonly pb::MessageParser<Appearance_Config> _parser = new pb::MessageParser<Appearance_Config>(() => new Appearance_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Appearance_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appearance_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appearance_Config(Appearance_Config other) : this() {
      id_ = other.id_;
      folderName_ = other.folderName_;
      mesh_ = other.mesh_;
      texture_ = other.texture_;
      animId_ = other.animId_;
      bakeMesh_ = other.bakeMesh_;
      scaleMap_ = other.scaleMap_;
      scaleLoading_ = other.scaleLoading_;
      atkSound_ = other.atkSound_;
      rangeSound_ = other.rangeSound_;
      rangeHitSound_ = other.rangeHitSound_;
      chargeSound_ = other.chargeSound_;
      deathEffect_ = other.deathEffect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appearance_Config Clone() {
      return new Appearance_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "folder_name" field.</summary>
    public const int FolderNameFieldNumber = 2;
    private string folderName_ = "";
    /// <summary>
    ///* 资源包名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderName {
      get { return folderName_; }
      set {
        folderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 3;
    private string mesh_ = "";
    /// <summary>
    ///* 模型路径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mesh {
      get { return mesh_; }
      set {
        mesh_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "texture" field.</summary>
    public const int TextureFieldNumber = 4;
    private string texture_ = "";
    /// <summary>
    ///* 贴图材质名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Texture {
      get { return texture_; }
      set {
        texture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anim_id" field.</summary>
    public const int AnimIdFieldNumber = 5;
    private uint animId_;
    /// <summary>
    ///* 动作表ID(索引GeneralAnimations_Config) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AnimId {
      get { return animId_; }
      set {
        animId_ = value;
      }
    }

    /// <summary>Field number for the "bake_mesh" field.</summary>
    public const int BakeMeshFieldNumber = 6;
    private bool bakeMesh_;
    /// <summary>
    ///* 是否烘焙模型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BakeMesh {
      get { return bakeMesh_; }
      set {
        bakeMesh_ = value;
      }
    }

    /// <summary>Field number for the "scale_map" field.</summary>
    public const int ScaleMapFieldNumber = 7;
    private float scaleMap_;
    /// <summary>
    ///* 世界地图模型缩放 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleMap {
      get { return scaleMap_; }
      set {
        scaleMap_ = value;
      }
    }

    /// <summary>Field number for the "scale_loading" field.</summary>
    public const int ScaleLoadingFieldNumber = 8;
    private float scaleLoading_;
    /// <summary>
    ///* loading界面模型缩放 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScaleLoading {
      get { return scaleLoading_; }
      set {
        scaleLoading_ = value;
      }
    }

    /// <summary>Field number for the "atk_sound" field.</summary>
    public const int AtkSoundFieldNumber = 9;
    private string atkSound_ = "";
    /// <summary>
    ///* 打击音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AtkSound {
      get { return atkSound_; }
      set {
        atkSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range_sound" field.</summary>
    public const int RangeSoundFieldNumber = 10;
    private string rangeSound_ = "";
    /// <summary>
    ///* 远程发射音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RangeSound {
      get { return rangeSound_; }
      set {
        rangeSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "range_hit_sound" field.</summary>
    public const int RangeHitSoundFieldNumber = 11;
    private string rangeHitSound_ = "";
    /// <summary>
    ///* 远程击中音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RangeHitSound {
      get { return rangeHitSound_; }
      set {
        rangeHitSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charge_sound" field.</summary>
    public const int ChargeSoundFieldNumber = 12;
    private string chargeSound_ = "";
    /// <summary>
    ///* 单个冲锋音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeSound {
      get { return chargeSound_; }
      set {
        chargeSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "death_effect" field.</summary>
    public const int DeathEffectFieldNumber = 13;
    private string deathEffect_ = "";
    /// <summary>
    ///* 死亡特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeathEffect {
      get { return deathEffect_; }
      set {
        deathEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Appearance_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Appearance_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderName != other.FolderName) return false;
      if (Mesh != other.Mesh) return false;
      if (Texture != other.Texture) return false;
      if (AnimId != other.AnimId) return false;
      if (BakeMesh != other.BakeMesh) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleMap, other.ScaleMap)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScaleLoading, other.ScaleLoading)) return false;
      if (AtkSound != other.AtkSound) return false;
      if (RangeSound != other.RangeSound) return false;
      if (RangeHitSound != other.RangeHitSound) return false;
      if (ChargeSound != other.ChargeSound) return false;
      if (DeathEffect != other.DeathEffect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FolderName.Length != 0) hash ^= FolderName.GetHashCode();
      if (Mesh.Length != 0) hash ^= Mesh.GetHashCode();
      if (Texture.Length != 0) hash ^= Texture.GetHashCode();
      if (AnimId != 0) hash ^= AnimId.GetHashCode();
      if (BakeMesh != false) hash ^= BakeMesh.GetHashCode();
      if (ScaleMap != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleMap);
      if (ScaleLoading != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScaleLoading);
      if (AtkSound.Length != 0) hash ^= AtkSound.GetHashCode();
      if (RangeSound.Length != 0) hash ^= RangeSound.GetHashCode();
      if (RangeHitSound.Length != 0) hash ^= RangeHitSound.GetHashCode();
      if (ChargeSound.Length != 0) hash ^= ChargeSound.GetHashCode();
      if (DeathEffect.Length != 0) hash ^= DeathEffect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (FolderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderName);
      }
      if (Mesh.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Mesh);
      }
      if (Texture.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Texture);
      }
      if (AnimId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AnimId);
      }
      if (BakeMesh != false) {
        output.WriteRawTag(48);
        output.WriteBool(BakeMesh);
      }
      if (ScaleMap != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(ScaleMap);
      }
      if (ScaleLoading != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(ScaleLoading);
      }
      if (AtkSound.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AtkSound);
      }
      if (RangeSound.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RangeSound);
      }
      if (RangeHitSound.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(RangeHitSound);
      }
      if (ChargeSound.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ChargeSound);
      }
      if (DeathEffect.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(DeathEffect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (FolderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderName);
      }
      if (Mesh.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mesh);
      }
      if (Texture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Texture);
      }
      if (AnimId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AnimId);
      }
      if (BakeMesh != false) {
        size += 1 + 1;
      }
      if (ScaleMap != 0F) {
        size += 1 + 4;
      }
      if (ScaleLoading != 0F) {
        size += 1 + 4;
      }
      if (AtkSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AtkSound);
      }
      if (RangeSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RangeSound);
      }
      if (RangeHitSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RangeHitSound);
      }
      if (ChargeSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChargeSound);
      }
      if (DeathEffect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeathEffect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Appearance_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FolderName.Length != 0) {
        FolderName = other.FolderName;
      }
      if (other.Mesh.Length != 0) {
        Mesh = other.Mesh;
      }
      if (other.Texture.Length != 0) {
        Texture = other.Texture;
      }
      if (other.AnimId != 0) {
        AnimId = other.AnimId;
      }
      if (other.BakeMesh != false) {
        BakeMesh = other.BakeMesh;
      }
      if (other.ScaleMap != 0F) {
        ScaleMap = other.ScaleMap;
      }
      if (other.ScaleLoading != 0F) {
        ScaleLoading = other.ScaleLoading;
      }
      if (other.AtkSound.Length != 0) {
        AtkSound = other.AtkSound;
      }
      if (other.RangeSound.Length != 0) {
        RangeSound = other.RangeSound;
      }
      if (other.RangeHitSound.Length != 0) {
        RangeHitSound = other.RangeHitSound;
      }
      if (other.ChargeSound.Length != 0) {
        ChargeSound = other.ChargeSound;
      }
      if (other.DeathEffect.Length != 0) {
        DeathEffect = other.DeathEffect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            FolderName = input.ReadString();
            break;
          }
          case 26: {
            Mesh = input.ReadString();
            break;
          }
          case 34: {
            Texture = input.ReadString();
            break;
          }
          case 40: {
            AnimId = input.ReadUInt32();
            break;
          }
          case 48: {
            BakeMesh = input.ReadBool();
            break;
          }
          case 61: {
            ScaleMap = input.ReadFloat();
            break;
          }
          case 69: {
            ScaleLoading = input.ReadFloat();
            break;
          }
          case 74: {
            AtkSound = input.ReadString();
            break;
          }
          case 82: {
            RangeSound = input.ReadString();
            break;
          }
          case 90: {
            RangeHitSound = input.ReadString();
            break;
          }
          case 98: {
            ChargeSound = input.ReadString();
            break;
          }
          case 106: {
            DeathEffect = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Appearance_Config_Data : pb::IMessage<Appearance_Config_Data> {
    private static readonly pb::MessageParser<Appearance_Config_Data> _parser = new pb::MessageParser<Appearance_Config_Data>(() => new Appearance_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Appearance_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appearance_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appearance_Config_Data(Appearance_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appearance_Config_Data Clone() {
      return new Appearance_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Appearance_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Appearance_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Appearance_Config> items_ = new pbc::RepeatedField<global::ConfigData.Appearance_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Appearance_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Appearance_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Appearance_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Appearance_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Config : pb::IMessage<Heroes_Config> {
    private static readonly pb::MessageParser<Heroes_Config> _parser = new pb::MessageParser<Heroes_Config>(() => new Heroes_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Config(Heroes_Config other) : this() {
      id_ = other.id_;
      desc_ = other.desc_;
      debugLevel_ = other.debugLevel_;
      debugFloor_ = other.debugFloor_;
      debugPawnCountLevel_ = other.debugPawnCountLevel_;
      debugRank_ = other.debugRank_;
      debugTalent_ = other.debugTalent_.Clone();
      heroNameGlobal_ = other.heroNameGlobal_;
      iconFormation_ = other.iconFormation_;
      iconFlag_ = other.iconFlag_;
      teamBannerHeight_ = other.teamBannerHeight_;
      classify_ = other.classify_;
      heroType_ = other.heroType_;
      quality_ = other.quality_;
      projectileId_ = other.projectileId_;
      teamloigicId_ = other.teamloigicId_;
      skills_ = other.skills_.Clone();
      mass_ = other.mass_;
      physicRadius_ = other.physicRadius_.Clone();
      scale_ = other.scale_;
      shadowScale_ = other.shadowScale_.Clone();
      canCapture_ = other.canCapture_;
      heroSoundShort_ = other.heroSoundShort_;
      meleeDps_ = other.meleeDps_;
      meleeSpeed_ = other.meleeSpeed_;
      meleeRadius_ = other.meleeRadius_;
      meleeHitEffect_ = other.meleeHitEffect_.Clone();
      rangeDps_ = other.rangeDps_;
      rangeSpeed_ = other.rangeSpeed_;
      rangeRadius_ = other.rangeRadius_;
      rangeHitEffect_ = other.rangeHitEffect_.Clone();
      chargeDmg_ = other.chargeDmg_;
      chargeAnimEffect_ = other.chargeAnimEffect_;
      chargeAnimEffectHit_ = other.chargeAnimEffectHit_;
      focusAltitude_ = other.focusAltitude_;
      criDamage_ = other.criDamage_;
      fullTalent_ = other.fullTalent_;
      catchReward_ = other.catchReward_;
      heroDeviation_ = other.heroDeviation_;
      heroProfile_ = other.heroProfile_;
      maxActionPoint_ = other.maxActionPoint_;
      morale_ = other.morale_;
      moraleAtk_ = other.moraleAtk_;
      moraleDef_ = other.moraleDef_;
      deadMorale_ = other.deadMorale_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Config Clone() {
      return new Heroes_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 2;
    private string desc_ = "";
    /// <summary>
    ///* 名称或描述 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "debug_level" field.</summary>
    public const int DebugLevelFieldNumber = 3;
    private uint debugLevel_;
    /// <summary>
    ///* 调试等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DebugLevel {
      get { return debugLevel_; }
      set {
        debugLevel_ = value;
      }
    }

    /// <summary>Field number for the "debug_floor" field.</summary>
    public const int DebugFloorFieldNumber = 4;
    private uint debugFloor_;
    /// <summary>
    ///* 调试突破(之后删除） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DebugFloor {
      get { return debugFloor_; }
      set {
        debugFloor_ = value;
      }
    }

    /// <summary>Field number for the "debug_pawn_count_level" field.</summary>
    public const int DebugPawnCountLevelFieldNumber = 5;
    private uint debugPawnCountLevel_;
    /// <summary>
    ///* 小兵调试等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DebugPawnCountLevel {
      get { return debugPawnCountLevel_; }
      set {
        debugPawnCountLevel_ = value;
      }
    }

    /// <summary>Field number for the "debug_rank" field.</summary>
    public const int DebugRankFieldNumber = 6;
    private uint debugRank_;
    /// <summary>
    ///* 调试星级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DebugRank {
      get { return debugRank_; }
      set {
        debugRank_ = value;
      }
    }

    /// <summary>Field number for the "debug_talent" field.</summary>
    public const int DebugTalentFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_debugTalent_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> debugTalent_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 调试天赋技能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> DebugTalent {
      get { return debugTalent_; }
    }

    /// <summary>Field number for the "hero_name_global" field.</summary>
    public const int HeroNameGlobalFieldNumber = 8;
    private string heroNameGlobal_ = "";
    /// <summary>
    ///* 英雄名称语言包 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroNameGlobal {
      get { return heroNameGlobal_; }
      set {
        heroNameGlobal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon_formation" field.</summary>
    public const int IconFormationFieldNumber = 9;
    private string iconFormation_ = "";
    /// <summary>
    ///* 英雄战前布阵头像 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconFormation {
      get { return iconFormation_; }
      set {
        iconFormation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon_flag" field.</summary>
    public const int IconFlagFieldNumber = 10;
    private string iconFlag_ = "";
    /// <summary>
    ///* 英雄战斗中旗帜头像 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconFlag {
      get { return iconFlag_; }
      set {
        iconFlag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team_banner_height" field.</summary>
    public const int TeamBannerHeightFieldNumber = 11;
    private int teamBannerHeight_;
    /// <summary>
    ///* 旗帜高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamBannerHeight {
      get { return teamBannerHeight_; }
      set {
        teamBannerHeight_ = value;
      }
    }

    /// <summary>Field number for the "classify" field.</summary>
    public const int ClassifyFieldNumber = 12;
    private uint classify_;
    /// <summary>
    ///* 英雄类型配置 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Classify {
      get { return classify_; }
      set {
        classify_ = value;
      }
    }

    /// <summary>Field number for the "hero_type" field.</summary>
    public const int HeroTypeFieldNumber = 13;
    private uint heroType_;
    /// <summary>
    ///* 英雄战斗定位类型（用来显示icon，索引Hero_Tpye页） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroType {
      get { return heroType_; }
      set {
        heroType_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 14;
    private uint quality_;
    /// <summary>
    ///* 品质（1绿色，2蓝色、3紫色，4橙色） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "projectile_id" field.</summary>
    public const int ProjectileIdFieldNumber = 15;
    private uint projectileId_;
    /// <summary>
    ///* 飞行功能ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProjectileId {
      get { return projectileId_; }
      set {
        projectileId_ = value;
      }
    }

    /// <summary>Field number for the "teamloigic_id" field.</summary>
    public const int TeamloigicIdFieldNumber = 16;
    private uint teamloigicId_;
    /// <summary>
    ///* 队伍逻辑(索引TeamLogical_Config) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TeamloigicId {
      get { return teamloigicId_; }
      set {
        teamloigicId_ = value;
      }
    }

    /// <summary>Field number for the "skills" field.</summary>
    public const int SkillsFieldNumber = 17;
    private static readonly pb::FieldCodec<uint> _repeated_skills_codec
        = pb::FieldCodec.ForUInt32(138);
    private readonly pbc::RepeatedField<uint> skills_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 可拥有技能 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Skills {
      get { return skills_; }
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 18;
    private float mass_;
    /// <summary>
    ///* 质量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "physic_radius" field.</summary>
    public const int PhysicRadiusFieldNumber = 19;
    private static readonly pb::FieldCodec<float> _repeated_physicRadius_codec
        = pb::FieldCodec.ForFloat(154);
    private readonly pbc::RepeatedField<float> physicRadius_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 物理碰撞范围（敌方|队友|友方） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PhysicRadius {
      get { return physicRadius_; }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 20;
    private float scale_;
    /// <summary>
    ///* 模型缩放比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "shadow_scale" field.</summary>
    public const int ShadowScaleFieldNumber = 21;
    private static readonly pb::FieldCodec<float> _repeated_shadowScale_codec
        = pb::FieldCodec.ForFloat(170);
    private readonly pbc::RepeatedField<float> shadowScale_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 影子缩放比例（长|宽） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ShadowScale {
      get { return shadowScale_; }
    }

    /// <summary>Field number for the "can_capture" field.</summary>
    public const int CanCaptureFieldNumber = 22;
    private bool canCapture_;
    /// <summary>
    ///* 英雄是否可以被捕获 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanCapture {
      get { return canCapture_; }
      set {
        canCapture_ = value;
      }
    }

    /// <summary>Field number for the "hero_sound_short" field.</summary>
    public const int HeroSoundShortFieldNumber = 23;
    private string heroSoundShort_ = "";
    /// <summary>
    ///* 英雄短语音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroSoundShort {
      get { return heroSoundShort_; }
      set {
        heroSoundShort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "melee_dps" field.</summary>
    public const int MeleeDpsFieldNumber = 24;
    private float meleeDps_;
    /// <summary>
    ///* 近战攻击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeDps {
      get { return meleeDps_; }
      set {
        meleeDps_ = value;
      }
    }

    /// <summary>Field number for the "melee_speed" field.</summary>
    public const int MeleeSpeedFieldNumber = 25;
    private float meleeSpeed_;
    /// <summary>
    ///* 近战攻击速度
    ///(单位:秒) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeSpeed {
      get { return meleeSpeed_; }
      set {
        meleeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "melee_radius" field.</summary>
    public const int MeleeRadiusFieldNumber = 26;
    private float meleeRadius_;
    /// <summary>
    ///* 近战范围攻击半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeRadius {
      get { return meleeRadius_; }
      set {
        meleeRadius_ = value;
      }
    }

    /// <summary>Field number for the "melee_hit_effect" field.</summary>
    public const int MeleeHitEffectFieldNumber = 27;
    private static readonly pb::FieldCodec<string> _repeated_meleeHitEffect_codec
        = pb::FieldCodec.ForString(218);
    private readonly pbc::RepeatedField<string> meleeHitEffect_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 近战击中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MeleeHitEffect {
      get { return meleeHitEffect_; }
    }

    /// <summary>Field number for the "range_dps" field.</summary>
    public const int RangeDpsFieldNumber = 28;
    private float rangeDps_;
    /// <summary>
    ///* 远程攻击力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeDps {
      get { return rangeDps_; }
      set {
        rangeDps_ = value;
      }
    }

    /// <summary>Field number for the "range_speed" field.</summary>
    public const int RangeSpeedFieldNumber = 29;
    private float rangeSpeed_;
    /// <summary>
    ///* 远程攻击速度(单位:秒) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeSpeed {
      get { return rangeSpeed_; }
      set {
        rangeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "range_radius" field.</summary>
    public const int RangeRadiusFieldNumber = 30;
    private float rangeRadius_;
    /// <summary>
    ///* 远程伤害半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeRadius {
      get { return rangeRadius_; }
      set {
        rangeRadius_ = value;
      }
    }

    /// <summary>Field number for the "range_hit_effect" field.</summary>
    public const int RangeHitEffectFieldNumber = 31;
    private static readonly pb::FieldCodec<string> _repeated_rangeHitEffect_codec
        = pb::FieldCodec.ForString(250);
    private readonly pbc::RepeatedField<string> rangeHitEffect_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 远程击中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RangeHitEffect {
      get { return rangeHitEffect_; }
    }

    /// <summary>Field number for the "charge_dmg" field.</summary>
    public const int ChargeDmgFieldNumber = 32;
    private float chargeDmg_;
    /// <summary>
    ///* 冲锋伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeDmg {
      get { return chargeDmg_; }
      set {
        chargeDmg_ = value;
      }
    }

    /// <summary>Field number for the "charge_anim_effect" field.</summary>
    public const int ChargeAnimEffectFieldNumber = 33;
    private string chargeAnimEffect_ = "";
    /// <summary>
    ///* 冲锋特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeAnimEffect {
      get { return chargeAnimEffect_; }
      set {
        chargeAnimEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charge_anim_effect_hit" field.</summary>
    public const int ChargeAnimEffectHitFieldNumber = 34;
    private string chargeAnimEffectHit_ = "";
    /// <summary>
    ///* 冲锋击中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeAnimEffectHit {
      get { return chargeAnimEffectHit_; }
      set {
        chargeAnimEffectHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "focus_altitude" field.</summary>
    public const int FocusAltitudeFieldNumber = 35;
    private float focusAltitude_;
    /// <summary>
    ///* 聚焦后的镜头高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FocusAltitude {
      get { return focusAltitude_; }
      set {
        focusAltitude_ = value;
      }
    }

    /// <summary>Field number for the "cri_damage" field.</summary>
    public const int CriDamageFieldNumber = 36;
    private float criDamage_;
    /// <summary>
    ///* 暴击伤害加成 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriDamage {
      get { return criDamage_; }
      set {
        criDamage_ = value;
      }
    }

    /// <summary>Field number for the "full_talent" field.</summary>
    public const int FullTalentFieldNumber = 37;
    private bool fullTalent_;
    /// <summary>
    ///* 是否天赋全开 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FullTalent {
      get { return fullTalent_; }
      set {
        fullTalent_ = value;
      }
    }

    /// <summary>Field number for the "catch_reward" field.</summary>
    public const int CatchRewardFieldNumber = 38;
    private uint catchReward_;
    /// <summary>
    ///* 悬赏掉落包 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CatchReward {
      get { return catchReward_; }
      set {
        catchReward_ = value;
      }
    }

    /// <summary>Field number for the "hero_deviation" field.</summary>
    public const int HeroDeviationFieldNumber = 39;
    private string heroDeviation_ = "";
    /// <summary>
    ///* 英雄偏向 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroDeviation {
      get { return heroDeviation_; }
      set {
        heroDeviation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_profile" field.</summary>
    public const int HeroProfileFieldNumber = 40;
    private string heroProfile_ = "";
    /// <summary>
    ///* 英雄列传 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroProfile {
      get { return heroProfile_; }
      set {
        heroProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_action_point" field.</summary>
    public const int MaxActionPointFieldNumber = 41;
    private uint maxActionPoint_;
    /// <summary>
    ///* 最大行动点数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxActionPoint {
      get { return maxActionPoint_; }
      set {
        maxActionPoint_ = value;
      }
    }

    /// <summary>Field number for the "morale" field.</summary>
    public const int MoraleFieldNumber = 42;
    private uint morale_;
    /// <summary>
    ///* 初始士气 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Morale {
      get { return morale_; }
      set {
        morale_ = value;
      }
    }

    /// <summary>Field number for the "morale_atk" field.</summary>
    public const int MoraleAtkFieldNumber = 43;
    private uint moraleAtk_;
    /// <summary>
    ///* 士气攻击力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoraleAtk {
      get { return moraleAtk_; }
      set {
        moraleAtk_ = value;
      }
    }

    /// <summary>Field number for the "morale_def" field.</summary>
    public const int MoraleDefFieldNumber = 44;
    private uint moraleDef_;
    /// <summary>
    ///* 士气防御力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MoraleDef {
      get { return moraleDef_; }
      set {
        moraleDef_ = value;
      }
    }

    /// <summary>Field number for the "dead_morale" field.</summary>
    public const int DeadMoraleFieldNumber = 45;
    private uint deadMorale_;
    /// <summary>
    ///* 英雄死亡扣除士气 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadMorale {
      get { return deadMorale_; }
      set {
        deadMorale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Desc != other.Desc) return false;
      if (DebugLevel != other.DebugLevel) return false;
      if (DebugFloor != other.DebugFloor) return false;
      if (DebugPawnCountLevel != other.DebugPawnCountLevel) return false;
      if (DebugRank != other.DebugRank) return false;
      if(!debugTalent_.Equals(other.debugTalent_)) return false;
      if (HeroNameGlobal != other.HeroNameGlobal) return false;
      if (IconFormation != other.IconFormation) return false;
      if (IconFlag != other.IconFlag) return false;
      if (TeamBannerHeight != other.TeamBannerHeight) return false;
      if (Classify != other.Classify) return false;
      if (HeroType != other.HeroType) return false;
      if (Quality != other.Quality) return false;
      if (ProjectileId != other.ProjectileId) return false;
      if (TeamloigicId != other.TeamloigicId) return false;
      if(!skills_.Equals(other.skills_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mass, other.Mass)) return false;
      if(!physicRadius_.Equals(other.physicRadius_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if(!shadowScale_.Equals(other.shadowScale_)) return false;
      if (CanCapture != other.CanCapture) return false;
      if (HeroSoundShort != other.HeroSoundShort) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeDps, other.MeleeDps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeSpeed, other.MeleeSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeRadius, other.MeleeRadius)) return false;
      if(!meleeHitEffect_.Equals(other.meleeHitEffect_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeDps, other.RangeDps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeSpeed, other.RangeSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeRadius, other.RangeRadius)) return false;
      if(!rangeHitEffect_.Equals(other.rangeHitEffect_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeDmg, other.ChargeDmg)) return false;
      if (ChargeAnimEffect != other.ChargeAnimEffect) return false;
      if (ChargeAnimEffectHit != other.ChargeAnimEffectHit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FocusAltitude, other.FocusAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriDamage, other.CriDamage)) return false;
      if (FullTalent != other.FullTalent) return false;
      if (CatchReward != other.CatchReward) return false;
      if (HeroDeviation != other.HeroDeviation) return false;
      if (HeroProfile != other.HeroProfile) return false;
      if (MaxActionPoint != other.MaxActionPoint) return false;
      if (Morale != other.Morale) return false;
      if (MoraleAtk != other.MoraleAtk) return false;
      if (MoraleDef != other.MoraleDef) return false;
      if (DeadMorale != other.DeadMorale) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (DebugLevel != 0) hash ^= DebugLevel.GetHashCode();
      if (DebugFloor != 0) hash ^= DebugFloor.GetHashCode();
      if (DebugPawnCountLevel != 0) hash ^= DebugPawnCountLevel.GetHashCode();
      if (DebugRank != 0) hash ^= DebugRank.GetHashCode();
      hash ^= debugTalent_.GetHashCode();
      if (HeroNameGlobal.Length != 0) hash ^= HeroNameGlobal.GetHashCode();
      if (IconFormation.Length != 0) hash ^= IconFormation.GetHashCode();
      if (IconFlag.Length != 0) hash ^= IconFlag.GetHashCode();
      if (TeamBannerHeight != 0) hash ^= TeamBannerHeight.GetHashCode();
      if (Classify != 0) hash ^= Classify.GetHashCode();
      if (HeroType != 0) hash ^= HeroType.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (ProjectileId != 0) hash ^= ProjectileId.GetHashCode();
      if (TeamloigicId != 0) hash ^= TeamloigicId.GetHashCode();
      hash ^= skills_.GetHashCode();
      if (Mass != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mass);
      hash ^= physicRadius_.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      hash ^= shadowScale_.GetHashCode();
      if (CanCapture != false) hash ^= CanCapture.GetHashCode();
      if (HeroSoundShort.Length != 0) hash ^= HeroSoundShort.GetHashCode();
      if (MeleeDps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeDps);
      if (MeleeSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeSpeed);
      if (MeleeRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeRadius);
      hash ^= meleeHitEffect_.GetHashCode();
      if (RangeDps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeDps);
      if (RangeSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeSpeed);
      if (RangeRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeRadius);
      hash ^= rangeHitEffect_.GetHashCode();
      if (ChargeDmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeDmg);
      if (ChargeAnimEffect.Length != 0) hash ^= ChargeAnimEffect.GetHashCode();
      if (ChargeAnimEffectHit.Length != 0) hash ^= ChargeAnimEffectHit.GetHashCode();
      if (FocusAltitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FocusAltitude);
      if (CriDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriDamage);
      if (FullTalent != false) hash ^= FullTalent.GetHashCode();
      if (CatchReward != 0) hash ^= CatchReward.GetHashCode();
      if (HeroDeviation.Length != 0) hash ^= HeroDeviation.GetHashCode();
      if (HeroProfile.Length != 0) hash ^= HeroProfile.GetHashCode();
      if (MaxActionPoint != 0) hash ^= MaxActionPoint.GetHashCode();
      if (Morale != 0) hash ^= Morale.GetHashCode();
      if (MoraleAtk != 0) hash ^= MoraleAtk.GetHashCode();
      if (MoraleDef != 0) hash ^= MoraleDef.GetHashCode();
      if (DeadMorale != 0) hash ^= DeadMorale.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Desc);
      }
      if (DebugLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DebugLevel);
      }
      if (DebugFloor != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DebugFloor);
      }
      if (DebugPawnCountLevel != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DebugPawnCountLevel);
      }
      if (DebugRank != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DebugRank);
      }
      debugTalent_.WriteTo(output, _repeated_debugTalent_codec);
      if (HeroNameGlobal.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(HeroNameGlobal);
      }
      if (IconFormation.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IconFormation);
      }
      if (IconFlag.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(IconFlag);
      }
      if (TeamBannerHeight != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TeamBannerHeight);
      }
      if (Classify != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Classify);
      }
      if (HeroType != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(HeroType);
      }
      if (Quality != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(Quality);
      }
      if (ProjectileId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(ProjectileId);
      }
      if (TeamloigicId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(TeamloigicId);
      }
      skills_.WriteTo(output, _repeated_skills_codec);
      if (Mass != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Mass);
      }
      physicRadius_.WriteTo(output, _repeated_physicRadius_codec);
      if (Scale != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(Scale);
      }
      shadowScale_.WriteTo(output, _repeated_shadowScale_codec);
      if (CanCapture != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(CanCapture);
      }
      if (HeroSoundShort.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(HeroSoundShort);
      }
      if (MeleeDps != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(MeleeDps);
      }
      if (MeleeSpeed != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(MeleeSpeed);
      }
      if (MeleeRadius != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(MeleeRadius);
      }
      meleeHitEffect_.WriteTo(output, _repeated_meleeHitEffect_codec);
      if (RangeDps != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(RangeDps);
      }
      if (RangeSpeed != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(RangeSpeed);
      }
      if (RangeRadius != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(RangeRadius);
      }
      rangeHitEffect_.WriteTo(output, _repeated_rangeHitEffect_codec);
      if (ChargeDmg != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(ChargeDmg);
      }
      if (ChargeAnimEffect.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(ChargeAnimEffect);
      }
      if (ChargeAnimEffectHit.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(ChargeAnimEffectHit);
      }
      if (FocusAltitude != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(FocusAltitude);
      }
      if (CriDamage != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(CriDamage);
      }
      if (FullTalent != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(FullTalent);
      }
      if (CatchReward != 0) {
        output.WriteRawTag(176, 2);
        output.WriteUInt32(CatchReward);
      }
      if (HeroDeviation.Length != 0) {
        output.WriteRawTag(186, 2);
        output.WriteString(HeroDeviation);
      }
      if (HeroProfile.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(HeroProfile);
      }
      if (MaxActionPoint != 0) {
        output.WriteRawTag(200, 2);
        output.WriteUInt32(MaxActionPoint);
      }
      if (Morale != 0) {
        output.WriteRawTag(208, 2);
        output.WriteUInt32(Morale);
      }
      if (MoraleAtk != 0) {
        output.WriteRawTag(216, 2);
        output.WriteUInt32(MoraleAtk);
      }
      if (MoraleDef != 0) {
        output.WriteRawTag(224, 2);
        output.WriteUInt32(MoraleDef);
      }
      if (DeadMorale != 0) {
        output.WriteRawTag(232, 2);
        output.WriteUInt32(DeadMorale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (DebugLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DebugLevel);
      }
      if (DebugFloor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DebugFloor);
      }
      if (DebugPawnCountLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DebugPawnCountLevel);
      }
      if (DebugRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DebugRank);
      }
      size += debugTalent_.CalculateSize(_repeated_debugTalent_codec);
      if (HeroNameGlobal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroNameGlobal);
      }
      if (IconFormation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconFormation);
      }
      if (IconFlag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconFlag);
      }
      if (TeamBannerHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamBannerHeight);
      }
      if (Classify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Classify);
      }
      if (HeroType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroType);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (ProjectileId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProjectileId);
      }
      if (TeamloigicId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TeamloigicId);
      }
      size += skills_.CalculateSize(_repeated_skills_codec);
      if (Mass != 0F) {
        size += 2 + 4;
      }
      size += physicRadius_.CalculateSize(_repeated_physicRadius_codec);
      if (Scale != 0F) {
        size += 2 + 4;
      }
      size += shadowScale_.CalculateSize(_repeated_shadowScale_codec);
      if (CanCapture != false) {
        size += 2 + 1;
      }
      if (HeroSoundShort.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeroSoundShort);
      }
      if (MeleeDps != 0F) {
        size += 2 + 4;
      }
      if (MeleeSpeed != 0F) {
        size += 2 + 4;
      }
      if (MeleeRadius != 0F) {
        size += 2 + 4;
      }
      size += meleeHitEffect_.CalculateSize(_repeated_meleeHitEffect_codec);
      if (RangeDps != 0F) {
        size += 2 + 4;
      }
      if (RangeSpeed != 0F) {
        size += 2 + 4;
      }
      if (RangeRadius != 0F) {
        size += 2 + 4;
      }
      size += rangeHitEffect_.CalculateSize(_repeated_rangeHitEffect_codec);
      if (ChargeDmg != 0F) {
        size += 2 + 4;
      }
      if (ChargeAnimEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChargeAnimEffect);
      }
      if (ChargeAnimEffectHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChargeAnimEffectHit);
      }
      if (FocusAltitude != 0F) {
        size += 2 + 4;
      }
      if (CriDamage != 0F) {
        size += 2 + 4;
      }
      if (FullTalent != false) {
        size += 2 + 1;
      }
      if (CatchReward != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CatchReward);
      }
      if (HeroDeviation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeroDeviation);
      }
      if (HeroProfile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeroProfile);
      }
      if (MaxActionPoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxActionPoint);
      }
      if (Morale != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Morale);
      }
      if (MoraleAtk != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoraleAtk);
      }
      if (MoraleDef != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MoraleDef);
      }
      if (DeadMorale != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeadMorale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.DebugLevel != 0) {
        DebugLevel = other.DebugLevel;
      }
      if (other.DebugFloor != 0) {
        DebugFloor = other.DebugFloor;
      }
      if (other.DebugPawnCountLevel != 0) {
        DebugPawnCountLevel = other.DebugPawnCountLevel;
      }
      if (other.DebugRank != 0) {
        DebugRank = other.DebugRank;
      }
      debugTalent_.Add(other.debugTalent_);
      if (other.HeroNameGlobal.Length != 0) {
        HeroNameGlobal = other.HeroNameGlobal;
      }
      if (other.IconFormation.Length != 0) {
        IconFormation = other.IconFormation;
      }
      if (other.IconFlag.Length != 0) {
        IconFlag = other.IconFlag;
      }
      if (other.TeamBannerHeight != 0) {
        TeamBannerHeight = other.TeamBannerHeight;
      }
      if (other.Classify != 0) {
        Classify = other.Classify;
      }
      if (other.HeroType != 0) {
        HeroType = other.HeroType;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.ProjectileId != 0) {
        ProjectileId = other.ProjectileId;
      }
      if (other.TeamloigicId != 0) {
        TeamloigicId = other.TeamloigicId;
      }
      skills_.Add(other.skills_);
      if (other.Mass != 0F) {
        Mass = other.Mass;
      }
      physicRadius_.Add(other.physicRadius_);
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      shadowScale_.Add(other.shadowScale_);
      if (other.CanCapture != false) {
        CanCapture = other.CanCapture;
      }
      if (other.HeroSoundShort.Length != 0) {
        HeroSoundShort = other.HeroSoundShort;
      }
      if (other.MeleeDps != 0F) {
        MeleeDps = other.MeleeDps;
      }
      if (other.MeleeSpeed != 0F) {
        MeleeSpeed = other.MeleeSpeed;
      }
      if (other.MeleeRadius != 0F) {
        MeleeRadius = other.MeleeRadius;
      }
      meleeHitEffect_.Add(other.meleeHitEffect_);
      if (other.RangeDps != 0F) {
        RangeDps = other.RangeDps;
      }
      if (other.RangeSpeed != 0F) {
        RangeSpeed = other.RangeSpeed;
      }
      if (other.RangeRadius != 0F) {
        RangeRadius = other.RangeRadius;
      }
      rangeHitEffect_.Add(other.rangeHitEffect_);
      if (other.ChargeDmg != 0F) {
        ChargeDmg = other.ChargeDmg;
      }
      if (other.ChargeAnimEffect.Length != 0) {
        ChargeAnimEffect = other.ChargeAnimEffect;
      }
      if (other.ChargeAnimEffectHit.Length != 0) {
        ChargeAnimEffectHit = other.ChargeAnimEffectHit;
      }
      if (other.FocusAltitude != 0F) {
        FocusAltitude = other.FocusAltitude;
      }
      if (other.CriDamage != 0F) {
        CriDamage = other.CriDamage;
      }
      if (other.FullTalent != false) {
        FullTalent = other.FullTalent;
      }
      if (other.CatchReward != 0) {
        CatchReward = other.CatchReward;
      }
      if (other.HeroDeviation.Length != 0) {
        HeroDeviation = other.HeroDeviation;
      }
      if (other.HeroProfile.Length != 0) {
        HeroProfile = other.HeroProfile;
      }
      if (other.MaxActionPoint != 0) {
        MaxActionPoint = other.MaxActionPoint;
      }
      if (other.Morale != 0) {
        Morale = other.Morale;
      }
      if (other.MoraleAtk != 0) {
        MoraleAtk = other.MoraleAtk;
      }
      if (other.MoraleDef != 0) {
        MoraleDef = other.MoraleDef;
      }
      if (other.DeadMorale != 0) {
        DeadMorale = other.DeadMorale;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Desc = input.ReadString();
            break;
          }
          case 24: {
            DebugLevel = input.ReadUInt32();
            break;
          }
          case 32: {
            DebugFloor = input.ReadUInt32();
            break;
          }
          case 40: {
            DebugPawnCountLevel = input.ReadUInt32();
            break;
          }
          case 48: {
            DebugRank = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            debugTalent_.AddEntriesFrom(input, _repeated_debugTalent_codec);
            break;
          }
          case 66: {
            HeroNameGlobal = input.ReadString();
            break;
          }
          case 74: {
            IconFormation = input.ReadString();
            break;
          }
          case 82: {
            IconFlag = input.ReadString();
            break;
          }
          case 88: {
            TeamBannerHeight = input.ReadInt32();
            break;
          }
          case 96: {
            Classify = input.ReadUInt32();
            break;
          }
          case 104: {
            HeroType = input.ReadUInt32();
            break;
          }
          case 112: {
            Quality = input.ReadUInt32();
            break;
          }
          case 120: {
            ProjectileId = input.ReadUInt32();
            break;
          }
          case 128: {
            TeamloigicId = input.ReadUInt32();
            break;
          }
          case 138:
          case 136: {
            skills_.AddEntriesFrom(input, _repeated_skills_codec);
            break;
          }
          case 149: {
            Mass = input.ReadFloat();
            break;
          }
          case 154:
          case 157: {
            physicRadius_.AddEntriesFrom(input, _repeated_physicRadius_codec);
            break;
          }
          case 165: {
            Scale = input.ReadFloat();
            break;
          }
          case 170:
          case 173: {
            shadowScale_.AddEntriesFrom(input, _repeated_shadowScale_codec);
            break;
          }
          case 176: {
            CanCapture = input.ReadBool();
            break;
          }
          case 186: {
            HeroSoundShort = input.ReadString();
            break;
          }
          case 197: {
            MeleeDps = input.ReadFloat();
            break;
          }
          case 205: {
            MeleeSpeed = input.ReadFloat();
            break;
          }
          case 213: {
            MeleeRadius = input.ReadFloat();
            break;
          }
          case 218: {
            meleeHitEffect_.AddEntriesFrom(input, _repeated_meleeHitEffect_codec);
            break;
          }
          case 229: {
            RangeDps = input.ReadFloat();
            break;
          }
          case 237: {
            RangeSpeed = input.ReadFloat();
            break;
          }
          case 245: {
            RangeRadius = input.ReadFloat();
            break;
          }
          case 250: {
            rangeHitEffect_.AddEntriesFrom(input, _repeated_rangeHitEffect_codec);
            break;
          }
          case 261: {
            ChargeDmg = input.ReadFloat();
            break;
          }
          case 266: {
            ChargeAnimEffect = input.ReadString();
            break;
          }
          case 274: {
            ChargeAnimEffectHit = input.ReadString();
            break;
          }
          case 285: {
            FocusAltitude = input.ReadFloat();
            break;
          }
          case 293: {
            CriDamage = input.ReadFloat();
            break;
          }
          case 296: {
            FullTalent = input.ReadBool();
            break;
          }
          case 304: {
            CatchReward = input.ReadUInt32();
            break;
          }
          case 314: {
            HeroDeviation = input.ReadString();
            break;
          }
          case 322: {
            HeroProfile = input.ReadString();
            break;
          }
          case 328: {
            MaxActionPoint = input.ReadUInt32();
            break;
          }
          case 336: {
            Morale = input.ReadUInt32();
            break;
          }
          case 344: {
            MoraleAtk = input.ReadUInt32();
            break;
          }
          case 352: {
            MoraleDef = input.ReadUInt32();
            break;
          }
          case 360: {
            DeadMorale = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Config_Data : pb::IMessage<Heroes_Config_Data> {
    private static readonly pb::MessageParser<Heroes_Config_Data> _parser = new pb::MessageParser<Heroes_Config_Data>(() => new Heroes_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Config_Data(Heroes_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Config_Data Clone() {
      return new Heroes_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Heroes_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Heroes_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Heroes_Config> items_ = new pbc::RepeatedField<global::ConfigData.Heroes_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Heroes_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heros_Words_Config : pb::IMessage<Heros_Words_Config> {
    private static readonly pb::MessageParser<Heros_Words_Config> _parser = new pb::MessageParser<Heros_Words_Config>(() => new Heros_Words_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heros_Words_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros_Words_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros_Words_Config(Heros_Words_Config other) : this() {
      id_ = other.id_;
      battleStartWords_ = other.battleStartWords_.Clone();
      chargeWords_ = other.chargeWords_.Clone();
      castSpellWords_ = other.castSpellWords_.Clone();
      lastWords_ = other.lastWords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros_Words_Config Clone() {
      return new Heros_Words_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "battle_start_words" field.</summary>
    public const int BattleStartWordsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_battleStartWords_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> battleStartWords_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 开场说的话 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BattleStartWords {
      get { return battleStartWords_; }
    }

    /// <summary>Field number for the "charge_words" field.</summary>
    public const int ChargeWordsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_chargeWords_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> chargeWords_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 冲锋说的话 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChargeWords {
      get { return chargeWords_; }
    }

    /// <summary>Field number for the "cast_spell_words" field.</summary>
    public const int CastSpellWordsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_castSpellWords_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> castSpellWords_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 放技能说的话 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CastSpellWords {
      get { return castSpellWords_; }
    }

    /// <summary>Field number for the "last_words" field.</summary>
    public const int LastWordsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_lastWords_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> lastWords_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 遗言 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LastWords {
      get { return lastWords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heros_Words_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heros_Words_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!battleStartWords_.Equals(other.battleStartWords_)) return false;
      if(!chargeWords_.Equals(other.chargeWords_)) return false;
      if(!castSpellWords_.Equals(other.castSpellWords_)) return false;
      if(!lastWords_.Equals(other.lastWords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= battleStartWords_.GetHashCode();
      hash ^= chargeWords_.GetHashCode();
      hash ^= castSpellWords_.GetHashCode();
      hash ^= lastWords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      battleStartWords_.WriteTo(output, _repeated_battleStartWords_codec);
      chargeWords_.WriteTo(output, _repeated_chargeWords_codec);
      castSpellWords_.WriteTo(output, _repeated_castSpellWords_codec);
      lastWords_.WriteTo(output, _repeated_lastWords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      size += battleStartWords_.CalculateSize(_repeated_battleStartWords_codec);
      size += chargeWords_.CalculateSize(_repeated_chargeWords_codec);
      size += castSpellWords_.CalculateSize(_repeated_castSpellWords_codec);
      size += lastWords_.CalculateSize(_repeated_lastWords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heros_Words_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      battleStartWords_.Add(other.battleStartWords_);
      chargeWords_.Add(other.chargeWords_);
      castSpellWords_.Add(other.castSpellWords_);
      lastWords_.Add(other.lastWords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            battleStartWords_.AddEntriesFrom(input, _repeated_battleStartWords_codec);
            break;
          }
          case 26: {
            chargeWords_.AddEntriesFrom(input, _repeated_chargeWords_codec);
            break;
          }
          case 34: {
            castSpellWords_.AddEntriesFrom(input, _repeated_castSpellWords_codec);
            break;
          }
          case 42: {
            lastWords_.AddEntriesFrom(input, _repeated_lastWords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heros_Words_Config_Data : pb::IMessage<Heros_Words_Config_Data> {
    private static readonly pb::MessageParser<Heros_Words_Config_Data> _parser = new pb::MessageParser<Heros_Words_Config_Data>(() => new Heros_Words_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heros_Words_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros_Words_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros_Words_Config_Data(Heros_Words_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heros_Words_Config_Data Clone() {
      return new Heros_Words_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Heros_Words_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Heros_Words_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Heros_Words_Config> items_ = new pbc::RepeatedField<global::ConfigData.Heros_Words_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Heros_Words_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heros_Words_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heros_Words_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heros_Words_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Data_Config : pb::IMessage<Heroes_Data_Config> {
    private static readonly pb::MessageParser<Heroes_Data_Config> _parser = new pb::MessageParser<Heroes_Data_Config>(() => new Heroes_Data_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Data_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Data_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Data_Config(Heroes_Data_Config other) : this() {
      id_ = other.id_;
      heroId_ = other.heroId_;
      floor_ = other.floor_;
      hpBase_ = other.hpBase_;
      hpGrowth_ = other.hpGrowth_;
      attackBase_ = other.attackBase_;
      attackGrowth_ = other.attackGrowth_;
      realAttackBase_ = other.realAttackBase_;
      realAttackGrowth_ = other.realAttackGrowth_;
      defenceBase_ = other.defenceBase_;
      defenceGrowth_ = other.defenceGrowth_;
      dodgeBase_ = other.dodgeBase_;
      dodgeGrowth_ = other.dodgeGrowth_;
      criticalBase_ = other.criticalBase_;
      criticalGrowth_ = other.criticalGrowth_;
      conquerTimeBase_ = other.conquerTimeBase_;
      conquerTimeGrowth_ = other.conquerTimeGrowth_;
      maxLevel_ = other.maxLevel_;
      upMaterials_ = other.upMaterials_.Clone();
      playerLv_ = other.playerLv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Data_Config Clone() {
      return new Heroes_Data_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private uint heroId_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "floor" field.</summary>
    public const int FloorFieldNumber = 3;
    private int floor_;
    /// <summary>
    ///* 阶数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Floor {
      get { return floor_; }
      set {
        floor_ = value;
      }
    }

    /// <summary>Field number for the "hp_base" field.</summary>
    public const int HpBaseFieldNumber = 4;
    private float hpBase_;
    /// <summary>
    ///* 血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HpBase {
      get { return hpBase_; }
      set {
        hpBase_ = value;
      }
    }

    /// <summary>Field number for the "hp_growth" field.</summary>
    public const int HpGrowthFieldNumber = 5;
    private float hpGrowth_;
    /// <summary>
    ///* 血量成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HpGrowth {
      get { return hpGrowth_; }
      set {
        hpGrowth_ = value;
      }
    }

    /// <summary>Field number for the "attack_base" field.</summary>
    public const int AttackBaseFieldNumber = 6;
    private float attackBase_;
    /// <summary>
    ///* 攻击值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackBase {
      get { return attackBase_; }
      set {
        attackBase_ = value;
      }
    }

    /// <summary>Field number for the "attack_growth" field.</summary>
    public const int AttackGrowthFieldNumber = 7;
    private float attackGrowth_;
    /// <summary>
    ///* 攻击成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackGrowth {
      get { return attackGrowth_; }
      set {
        attackGrowth_ = value;
      }
    }

    /// <summary>Field number for the "real_attack_base" field.</summary>
    public const int RealAttackBaseFieldNumber = 8;
    private float realAttackBase_;
    /// <summary>
    ///* 真实伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealAttackBase {
      get { return realAttackBase_; }
      set {
        realAttackBase_ = value;
      }
    }

    /// <summary>Field number for the "real_attack_growth" field.</summary>
    public const int RealAttackGrowthFieldNumber = 9;
    private float realAttackGrowth_;
    /// <summary>
    ///* 真实伤害成长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealAttackGrowth {
      get { return realAttackGrowth_; }
      set {
        realAttackGrowth_ = value;
      }
    }

    /// <summary>Field number for the "defence_base" field.</summary>
    public const int DefenceBaseFieldNumber = 10;
    private float defenceBase_;
    /// <summary>
    ///* 防御 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefenceBase {
      get { return defenceBase_; }
      set {
        defenceBase_ = value;
      }
    }

    /// <summary>Field number for the "defence_growth" field.</summary>
    public const int DefenceGrowthFieldNumber = 11;
    private float defenceGrowth_;
    /// <summary>
    ///* 防御成长洗漱 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefenceGrowth {
      get { return defenceGrowth_; }
      set {
        defenceGrowth_ = value;
      }
    }

    /// <summary>Field number for the "dodge_base" field.</summary>
    public const int DodgeBaseFieldNumber = 12;
    private float dodgeBase_;
    /// <summary>
    ///* 闪避值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeBase {
      get { return dodgeBase_; }
      set {
        dodgeBase_ = value;
      }
    }

    /// <summary>Field number for the "dodge_growth" field.</summary>
    public const int DodgeGrowthFieldNumber = 13;
    private float dodgeGrowth_;
    /// <summary>
    ///* 闪避成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeGrowth {
      get { return dodgeGrowth_; }
      set {
        dodgeGrowth_ = value;
      }
    }

    /// <summary>Field number for the "critical_base" field.</summary>
    public const int CriticalBaseFieldNumber = 14;
    private float criticalBase_;
    /// <summary>
    ///* 暴击值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriticalBase {
      get { return criticalBase_; }
      set {
        criticalBase_ = value;
      }
    }

    /// <summary>Field number for the "critical_growth" field.</summary>
    public const int CriticalGrowthFieldNumber = 15;
    private float criticalGrowth_;
    /// <summary>
    ///* 暴击成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriticalGrowth {
      get { return criticalGrowth_; }
      set {
        criticalGrowth_ = value;
      }
    }

    /// <summary>Field number for the "conquer_time_base" field.</summary>
    public const int ConquerTimeBaseFieldNumber = 16;
    private float conquerTimeBase_;
    /// <summary>
    ///* 基础征服时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConquerTimeBase {
      get { return conquerTimeBase_; }
      set {
        conquerTimeBase_ = value;
      }
    }

    /// <summary>Field number for the "conquer_time_growth" field.</summary>
    public const int ConquerTimeGrowthFieldNumber = 17;
    private float conquerTimeGrowth_;
    /// <summary>
    ///* 征服时间成长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConquerTimeGrowth {
      get { return conquerTimeGrowth_; }
      set {
        conquerTimeGrowth_ = value;
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 18;
    private int maxLevel_;
    /// <summary>
    ///* 最大等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "up_materials" field.</summary>
    public const int UpMaterialsFieldNumber = 19;
    private static readonly pb::FieldCodec<uint> _repeated_upMaterials_codec
        = pb::FieldCodec.ForUInt32(154);
    private readonly pbc::RepeatedField<uint> upMaterials_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 突破材料列表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UpMaterials {
      get { return upMaterials_; }
    }

    /// <summary>Field number for the "player_lv" field.</summary>
    public const int PlayerLvFieldNumber = 20;
    private int playerLv_;
    /// <summary>
    ///* 突破所需的玩家等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerLv {
      get { return playerLv_; }
      set {
        playerLv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Data_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Data_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (HeroId != other.HeroId) return false;
      if (Floor != other.Floor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HpBase, other.HpBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HpGrowth, other.HpGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackBase, other.AttackBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackGrowth, other.AttackGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealAttackBase, other.RealAttackBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealAttackGrowth, other.RealAttackGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefenceBase, other.DefenceBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefenceGrowth, other.DefenceGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeBase, other.DodgeBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeGrowth, other.DodgeGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriticalBase, other.CriticalBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriticalGrowth, other.CriticalGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConquerTimeBase, other.ConquerTimeBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConquerTimeGrowth, other.ConquerTimeGrowth)) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if(!upMaterials_.Equals(other.upMaterials_)) return false;
      if (PlayerLv != other.PlayerLv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (Floor != 0) hash ^= Floor.GetHashCode();
      if (HpBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HpBase);
      if (HpGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HpGrowth);
      if (AttackBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackBase);
      if (AttackGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackGrowth);
      if (RealAttackBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealAttackBase);
      if (RealAttackGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealAttackGrowth);
      if (DefenceBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefenceBase);
      if (DefenceGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefenceGrowth);
      if (DodgeBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeBase);
      if (DodgeGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeGrowth);
      if (CriticalBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriticalBase);
      if (CriticalGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriticalGrowth);
      if (ConquerTimeBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConquerTimeBase);
      if (ConquerTimeGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConquerTimeGrowth);
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      hash ^= upMaterials_.GetHashCode();
      if (PlayerLv != 0) hash ^= PlayerLv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HeroId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (Floor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Floor);
      }
      if (HpBase != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HpBase);
      }
      if (HpGrowth != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(HpGrowth);
      }
      if (AttackBase != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(AttackBase);
      }
      if (AttackGrowth != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(AttackGrowth);
      }
      if (RealAttackBase != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RealAttackBase);
      }
      if (RealAttackGrowth != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RealAttackGrowth);
      }
      if (DefenceBase != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(DefenceBase);
      }
      if (DefenceGrowth != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DefenceGrowth);
      }
      if (DodgeBase != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DodgeBase);
      }
      if (DodgeGrowth != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(DodgeGrowth);
      }
      if (CriticalBase != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(CriticalBase);
      }
      if (CriticalGrowth != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(CriticalGrowth);
      }
      if (ConquerTimeBase != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ConquerTimeBase);
      }
      if (ConquerTimeGrowth != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ConquerTimeGrowth);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MaxLevel);
      }
      upMaterials_.WriteTo(output, _repeated_upMaterials_codec);
      if (PlayerLv != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(PlayerLv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Floor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Floor);
      }
      if (HpBase != 0F) {
        size += 1 + 4;
      }
      if (HpGrowth != 0F) {
        size += 1 + 4;
      }
      if (AttackBase != 0F) {
        size += 1 + 4;
      }
      if (AttackGrowth != 0F) {
        size += 1 + 4;
      }
      if (RealAttackBase != 0F) {
        size += 1 + 4;
      }
      if (RealAttackGrowth != 0F) {
        size += 1 + 4;
      }
      if (DefenceBase != 0F) {
        size += 1 + 4;
      }
      if (DefenceGrowth != 0F) {
        size += 1 + 4;
      }
      if (DodgeBase != 0F) {
        size += 1 + 4;
      }
      if (DodgeGrowth != 0F) {
        size += 1 + 4;
      }
      if (CriticalBase != 0F) {
        size += 1 + 4;
      }
      if (CriticalGrowth != 0F) {
        size += 1 + 4;
      }
      if (ConquerTimeBase != 0F) {
        size += 2 + 4;
      }
      if (ConquerTimeGrowth != 0F) {
        size += 2 + 4;
      }
      if (MaxLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      size += upMaterials_.CalculateSize(_repeated_upMaterials_codec);
      if (PlayerLv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlayerLv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Data_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.Floor != 0) {
        Floor = other.Floor;
      }
      if (other.HpBase != 0F) {
        HpBase = other.HpBase;
      }
      if (other.HpGrowth != 0F) {
        HpGrowth = other.HpGrowth;
      }
      if (other.AttackBase != 0F) {
        AttackBase = other.AttackBase;
      }
      if (other.AttackGrowth != 0F) {
        AttackGrowth = other.AttackGrowth;
      }
      if (other.RealAttackBase != 0F) {
        RealAttackBase = other.RealAttackBase;
      }
      if (other.RealAttackGrowth != 0F) {
        RealAttackGrowth = other.RealAttackGrowth;
      }
      if (other.DefenceBase != 0F) {
        DefenceBase = other.DefenceBase;
      }
      if (other.DefenceGrowth != 0F) {
        DefenceGrowth = other.DefenceGrowth;
      }
      if (other.DodgeBase != 0F) {
        DodgeBase = other.DodgeBase;
      }
      if (other.DodgeGrowth != 0F) {
        DodgeGrowth = other.DodgeGrowth;
      }
      if (other.CriticalBase != 0F) {
        CriticalBase = other.CriticalBase;
      }
      if (other.CriticalGrowth != 0F) {
        CriticalGrowth = other.CriticalGrowth;
      }
      if (other.ConquerTimeBase != 0F) {
        ConquerTimeBase = other.ConquerTimeBase;
      }
      if (other.ConquerTimeGrowth != 0F) {
        ConquerTimeGrowth = other.ConquerTimeGrowth;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      upMaterials_.Add(other.upMaterials_);
      if (other.PlayerLv != 0) {
        PlayerLv = other.PlayerLv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 24: {
            Floor = input.ReadInt32();
            break;
          }
          case 37: {
            HpBase = input.ReadFloat();
            break;
          }
          case 45: {
            HpGrowth = input.ReadFloat();
            break;
          }
          case 53: {
            AttackBase = input.ReadFloat();
            break;
          }
          case 61: {
            AttackGrowth = input.ReadFloat();
            break;
          }
          case 69: {
            RealAttackBase = input.ReadFloat();
            break;
          }
          case 77: {
            RealAttackGrowth = input.ReadFloat();
            break;
          }
          case 85: {
            DefenceBase = input.ReadFloat();
            break;
          }
          case 93: {
            DefenceGrowth = input.ReadFloat();
            break;
          }
          case 101: {
            DodgeBase = input.ReadFloat();
            break;
          }
          case 109: {
            DodgeGrowth = input.ReadFloat();
            break;
          }
          case 117: {
            CriticalBase = input.ReadFloat();
            break;
          }
          case 125: {
            CriticalGrowth = input.ReadFloat();
            break;
          }
          case 133: {
            ConquerTimeBase = input.ReadFloat();
            break;
          }
          case 141: {
            ConquerTimeGrowth = input.ReadFloat();
            break;
          }
          case 144: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 154:
          case 152: {
            upMaterials_.AddEntriesFrom(input, _repeated_upMaterials_codec);
            break;
          }
          case 160: {
            PlayerLv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Data_Config_Data : pb::IMessage<Heroes_Data_Config_Data> {
    private static readonly pb::MessageParser<Heroes_Data_Config_Data> _parser = new pb::MessageParser<Heroes_Data_Config_Data>(() => new Heroes_Data_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Data_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Data_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Data_Config_Data(Heroes_Data_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Data_Config_Data Clone() {
      return new Heroes_Data_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Heroes_Data_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Heroes_Data_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Heroes_Data_Config> items_ = new pbc::RepeatedField<global::ConfigData.Heroes_Data_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Heroes_Data_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Data_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Data_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Data_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Skill_Config : pb::IMessage<Heroes_Skill_Config> {
    private static readonly pb::MessageParser<Heroes_Skill_Config> _parser = new pb::MessageParser<Heroes_Skill_Config>(() => new Heroes_Skill_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Skill_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Skill_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Skill_Config(Heroes_Skill_Config other) : this() {
      id_ = other.id_;
      heroId_ = other.heroId_;
      skillSlot_ = other.skillSlot_;
      quality_ = other.quality_;
      needLevel_ = other.needLevel_;
      needRank_ = other.needRank_;
      skillTable_ = other.skillTable_.Clone();
      materials_ = other.materials_.Clone();
      upMaterials_ = other.upMaterials_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Skill_Config Clone() {
      return new Heroes_Skill_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private uint heroId_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "skill_slot" field.</summary>
    public const int SkillSlotFieldNumber = 3;
    private uint skillSlot_;
    /// <summary>
    ///* 技能格子 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SkillSlot {
      get { return skillSlot_; }
      set {
        skillSlot_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 4;
    private uint quality_;
    /// <summary>
    ///* 格子品质色 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "need_level" field.</summary>
    public const int NeedLevelFieldNumber = 5;
    private uint needLevel_;
    /// <summary>
    ///* 所需等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeedLevel {
      get { return needLevel_; }
      set {
        needLevel_ = value;
      }
    }

    /// <summary>Field number for the "need_rank" field.</summary>
    public const int NeedRankFieldNumber = 6;
    private int needRank_;
    /// <summary>
    ///* 所需星级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NeedRank {
      get { return needRank_; }
      set {
        needRank_ = value;
      }
    }

    /// <summary>Field number for the "skill_table" field.</summary>
    public const int SkillTableFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_skillTable_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> skillTable_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 技能表 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SkillTable {
      get { return skillTable_; }
    }

    /// <summary>Field number for the "materials" field.</summary>
    public const int MaterialsFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_materials_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> materials_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 刷技能材料 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Materials {
      get { return materials_; }
    }

    /// <summary>Field number for the "up_materials" field.</summary>
    public const int UpMaterialsFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_upMaterials_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> upMaterials_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 格子升级材料 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UpMaterials {
      get { return upMaterials_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Skill_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Skill_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (HeroId != other.HeroId) return false;
      if (SkillSlot != other.SkillSlot) return false;
      if (Quality != other.Quality) return false;
      if (NeedLevel != other.NeedLevel) return false;
      if (NeedRank != other.NeedRank) return false;
      if(!skillTable_.Equals(other.skillTable_)) return false;
      if(!materials_.Equals(other.materials_)) return false;
      if(!upMaterials_.Equals(other.upMaterials_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (SkillSlot != 0) hash ^= SkillSlot.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (NeedLevel != 0) hash ^= NeedLevel.GetHashCode();
      if (NeedRank != 0) hash ^= NeedRank.GetHashCode();
      hash ^= skillTable_.GetHashCode();
      hash ^= materials_.GetHashCode();
      hash ^= upMaterials_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HeroId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (SkillSlot != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SkillSlot);
      }
      if (Quality != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Quality);
      }
      if (NeedLevel != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NeedLevel);
      }
      if (NeedRank != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NeedRank);
      }
      skillTable_.WriteTo(output, _repeated_skillTable_codec);
      materials_.WriteTo(output, _repeated_materials_codec);
      upMaterials_.WriteTo(output, _repeated_upMaterials_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (SkillSlot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SkillSlot);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (NeedLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NeedLevel);
      }
      if (NeedRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedRank);
      }
      size += skillTable_.CalculateSize(_repeated_skillTable_codec);
      size += materials_.CalculateSize(_repeated_materials_codec);
      size += upMaterials_.CalculateSize(_repeated_upMaterials_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Skill_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.SkillSlot != 0) {
        SkillSlot = other.SkillSlot;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.NeedLevel != 0) {
        NeedLevel = other.NeedLevel;
      }
      if (other.NeedRank != 0) {
        NeedRank = other.NeedRank;
      }
      skillTable_.Add(other.skillTable_);
      materials_.Add(other.materials_);
      upMaterials_.Add(other.upMaterials_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 24: {
            SkillSlot = input.ReadUInt32();
            break;
          }
          case 32: {
            Quality = input.ReadUInt32();
            break;
          }
          case 40: {
            NeedLevel = input.ReadUInt32();
            break;
          }
          case 48: {
            NeedRank = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            skillTable_.AddEntriesFrom(input, _repeated_skillTable_codec);
            break;
          }
          case 66:
          case 64: {
            materials_.AddEntriesFrom(input, _repeated_materials_codec);
            break;
          }
          case 74:
          case 72: {
            upMaterials_.AddEntriesFrom(input, _repeated_upMaterials_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Skill_Config_Data : pb::IMessage<Heroes_Skill_Config_Data> {
    private static readonly pb::MessageParser<Heroes_Skill_Config_Data> _parser = new pb::MessageParser<Heroes_Skill_Config_Data>(() => new Heroes_Skill_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Skill_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Skill_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Skill_Config_Data(Heroes_Skill_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Skill_Config_Data Clone() {
      return new Heroes_Skill_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Heroes_Skill_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Heroes_Skill_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Heroes_Skill_Config> items_ = new pbc::RepeatedField<global::ConfigData.Heroes_Skill_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Heroes_Skill_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Skill_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Skill_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Skill_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Rank_Config : pb::IMessage<Heroes_Rank_Config> {
    private static readonly pb::MessageParser<Heroes_Rank_Config> _parser = new pb::MessageParser<Heroes_Rank_Config>(() => new Heroes_Rank_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Rank_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Rank_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Rank_Config(Heroes_Rank_Config other) : this() {
      id_ = other.id_;
      heroId_ = other.heroId_;
      rank_ = other.rank_;
      exp_ = other.exp_;
      levelLimit_ = other.levelLimit_;
      hp_ = other.hp_;
      attack_ = other.attack_;
      realAttack_ = other.realAttack_;
      defence_ = other.defence_;
      dodge_ = other.dodge_;
      critical_ = other.critical_;
      heroAppearId_ = other.heroAppearId_;
      soliderId_ = other.soliderId_;
      spellCount_ = other.spellCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Rank_Config Clone() {
      return new Heroes_Rank_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "hero_id" field.</summary>
    public const int HeroIdFieldNumber = 2;
    private uint heroId_;
    /// <summary>
    ///* 英雄ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroId {
      get { return heroId_; }
      set {
        heroId_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 3;
    private uint rank_;
    /// <summary>
    ///* 星阶 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private uint exp_;
    /// <summary>
    ///* 升级经验 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level_limit" field.</summary>
    public const int LevelLimitFieldNumber = 5;
    private uint levelLimit_;
    /// <summary>
    ///* 最低等级限制 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelLimit {
      get { return levelLimit_; }
      set {
        levelLimit_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 6;
    private float hp_;
    /// <summary>
    ///* 血量倍率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 7;
    private float attack_;
    /// <summary>
    ///* 攻击倍率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "real_attack" field.</summary>
    public const int RealAttackFieldNumber = 8;
    private float realAttack_;
    /// <summary>
    ///* 真实伤害倍率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealAttack {
      get { return realAttack_; }
      set {
        realAttack_ = value;
      }
    }

    /// <summary>Field number for the "defence" field.</summary>
    public const int DefenceFieldNumber = 9;
    private float defence_;
    /// <summary>
    ///* 防御倍率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Defence {
      get { return defence_; }
      set {
        defence_ = value;
      }
    }

    /// <summary>Field number for the "dodge" field.</summary>
    public const int DodgeFieldNumber = 10;
    private float dodge_;
    /// <summary>
    ///* 闪避倍率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "critical" field.</summary>
    public const int CriticalFieldNumber = 11;
    private float critical_;
    /// <summary>
    ///* 暴击倍率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Critical {
      get { return critical_; }
      set {
        critical_ = value;
      }
    }

    /// <summary>Field number for the "hero_appear_id" field.</summary>
    public const int HeroAppearIdFieldNumber = 12;
    private uint heroAppearId_;
    /// <summary>
    ///* 英雄模型资源配置ID
    ///（索引Apperance_Config） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroAppearId {
      get { return heroAppearId_; }
      set {
        heroAppearId_ = value;
      }
    }

    /// <summary>Field number for the "solider_id" field.</summary>
    public const int SoliderIdFieldNumber = 13;
    private uint soliderId_;
    /// <summary>
    ///* 士兵ID（索引SoldierAttribute_Config） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SoliderId {
      get { return soliderId_; }
      set {
        soliderId_ = value;
      }
    }

    /// <summary>Field number for the "spell_count" field.</summary>
    public const int SpellCountFieldNumber = 14;
    private uint spellCount_;
    /// <summary>
    ///* 主动技能释放次数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpellCount {
      get { return spellCount_; }
      set {
        spellCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Rank_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Rank_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (HeroId != other.HeroId) return false;
      if (Rank != other.Rank) return false;
      if (Exp != other.Exp) return false;
      if (LevelLimit != other.LevelLimit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hp, other.Hp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Attack, other.Attack)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealAttack, other.RealAttack)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Defence, other.Defence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dodge, other.Dodge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Critical, other.Critical)) return false;
      if (HeroAppearId != other.HeroAppearId) return false;
      if (SoliderId != other.SoliderId) return false;
      if (SpellCount != other.SpellCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (HeroId != 0) hash ^= HeroId.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (LevelLimit != 0) hash ^= LevelLimit.GetHashCode();
      if (Hp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hp);
      if (Attack != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Attack);
      if (RealAttack != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealAttack);
      if (Defence != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Defence);
      if (Dodge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dodge);
      if (Critical != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Critical);
      if (HeroAppearId != 0) hash ^= HeroAppearId.GetHashCode();
      if (SoliderId != 0) hash ^= SoliderId.GetHashCode();
      if (SpellCount != 0) hash ^= SpellCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HeroId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(HeroId);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Rank);
      }
      if (Exp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Exp);
      }
      if (LevelLimit != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LevelLimit);
      }
      if (Hp != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Hp);
      }
      if (Attack != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Attack);
      }
      if (RealAttack != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RealAttack);
      }
      if (Defence != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Defence);
      }
      if (Dodge != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Dodge);
      }
      if (Critical != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Critical);
      }
      if (HeroAppearId != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(HeroAppearId);
      }
      if (SoliderId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(SoliderId);
      }
      if (SpellCount != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(SpellCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HeroId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rank);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Exp);
      }
      if (LevelLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelLimit);
      }
      if (Hp != 0F) {
        size += 1 + 4;
      }
      if (Attack != 0F) {
        size += 1 + 4;
      }
      if (RealAttack != 0F) {
        size += 1 + 4;
      }
      if (Defence != 0F) {
        size += 1 + 4;
      }
      if (Dodge != 0F) {
        size += 1 + 4;
      }
      if (Critical != 0F) {
        size += 1 + 4;
      }
      if (HeroAppearId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroAppearId);
      }
      if (SoliderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SoliderId);
      }
      if (SpellCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpellCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Rank_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.HeroId != 0) {
        HeroId = other.HeroId;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.LevelLimit != 0) {
        LevelLimit = other.LevelLimit;
      }
      if (other.Hp != 0F) {
        Hp = other.Hp;
      }
      if (other.Attack != 0F) {
        Attack = other.Attack;
      }
      if (other.RealAttack != 0F) {
        RealAttack = other.RealAttack;
      }
      if (other.Defence != 0F) {
        Defence = other.Defence;
      }
      if (other.Dodge != 0F) {
        Dodge = other.Dodge;
      }
      if (other.Critical != 0F) {
        Critical = other.Critical;
      }
      if (other.HeroAppearId != 0) {
        HeroAppearId = other.HeroAppearId;
      }
      if (other.SoliderId != 0) {
        SoliderId = other.SoliderId;
      }
      if (other.SpellCount != 0) {
        SpellCount = other.SpellCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            HeroId = input.ReadUInt32();
            break;
          }
          case 24: {
            Rank = input.ReadUInt32();
            break;
          }
          case 32: {
            Exp = input.ReadUInt32();
            break;
          }
          case 40: {
            LevelLimit = input.ReadUInt32();
            break;
          }
          case 53: {
            Hp = input.ReadFloat();
            break;
          }
          case 61: {
            Attack = input.ReadFloat();
            break;
          }
          case 69: {
            RealAttack = input.ReadFloat();
            break;
          }
          case 77: {
            Defence = input.ReadFloat();
            break;
          }
          case 85: {
            Dodge = input.ReadFloat();
            break;
          }
          case 93: {
            Critical = input.ReadFloat();
            break;
          }
          case 96: {
            HeroAppearId = input.ReadUInt32();
            break;
          }
          case 104: {
            SoliderId = input.ReadUInt32();
            break;
          }
          case 112: {
            SpellCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Rank_Config_Data : pb::IMessage<Heroes_Rank_Config_Data> {
    private static readonly pb::MessageParser<Heroes_Rank_Config_Data> _parser = new pb::MessageParser<Heroes_Rank_Config_Data>(() => new Heroes_Rank_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Rank_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Rank_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Rank_Config_Data(Heroes_Rank_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Rank_Config_Data Clone() {
      return new Heroes_Rank_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Heroes_Rank_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Heroes_Rank_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Heroes_Rank_Config> items_ = new pbc::RepeatedField<global::ConfigData.Heroes_Rank_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Heroes_Rank_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Rank_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Rank_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Rank_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Solo_Hero_Config : pb::IMessage<Solo_Hero_Config> {
    private static readonly pb::MessageParser<Solo_Hero_Config> _parser = new pb::MessageParser<Solo_Hero_Config>(() => new Solo_Hero_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Solo_Hero_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Hero_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Hero_Config(Solo_Hero_Config other) : this() {
      id_ = other.id_;
      joystickMode_ = other.joystickMode_;
      powerMax_ = other.powerMax_;
      powerRecover_ = other.powerRecover_.Clone();
      comboAtk_ = other.comboAtk_.Clone();
      speedRate_ = other.speedRate_;
      atkRange_ = other.atkRange_;
      dmgRange_ = other.dmgRange_.Clone();
      dmgAngle_ = other.dmgAngle_.Clone();
      soloShakeEffect_ = other.soloShakeEffect_.Clone();
      soloTriggerEffect_ = other.soloTriggerEffect_.Clone();
      soloHitFly_ = other.soloHitFly_.Clone();
      soloShakeSound_ = other.soloShakeSound_.Clone();
      soloTriggerSound_ = other.soloTriggerSound_;
      cooldownDelay_ = other.cooldownDelay_.Clone();
      evadeDis_ = other.evadeDis_;
      cameraShake_ = other.cameraShake_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Hero_Config Clone() {
      return new Solo_Hero_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "joystick_mode" field.</summary>
    public const int JoystickModeFieldNumber = 2;
    private uint joystickMode_;
    /// <summary>
    ///* 摇杆模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint JoystickMode {
      get { return joystickMode_; }
      set {
        joystickMode_ = value;
      }
    }

    /// <summary>Field number for the "power_max" field.</summary>
    public const int PowerMaxFieldNumber = 3;
    private uint powerMax_;
    /// <summary>
    ///* 能量上限 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PowerMax {
      get { return powerMax_; }
      set {
        powerMax_ = value;
      }
    }

    /// <summary>Field number for the "power_recover" field.</summary>
    public const int PowerRecoverFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_powerRecover_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> powerRecover_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 每击获得能量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PowerRecover {
      get { return powerRecover_; }
    }

    /// <summary>Field number for the "combo_atk" field.</summary>
    public const int ComboAtkFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_comboAtk_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> comboAtk_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 连击数增加提升攻击力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ComboAtk {
      get { return comboAtk_; }
    }

    /// <summary>Field number for the "speed_rate" field.</summary>
    public const int SpeedRateFieldNumber = 6;
    private float speedRate_;
    /// <summary>
    ///* 移动速度倍数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRate {
      get { return speedRate_; }
      set {
        speedRate_ = value;
      }
    }

    /// <summary>Field number for the "atk_range" field.</summary>
    public const int AtkRangeFieldNumber = 7;
    private float atkRange_;
    /// <summary>
    ///* 攻击范围，射程 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AtkRange {
      get { return atkRange_; }
      set {
        atkRange_ = value;
      }
    }

    /// <summary>Field number for the "dmg_range" field.</summary>
    public const int DmgRangeFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_dmgRange_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> dmgRange_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 伤害范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DmgRange {
      get { return dmgRange_; }
    }

    /// <summary>Field number for the "dmg_angle" field.</summary>
    public const int DmgAngleFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_dmgAngle_codec
        = pb::FieldCodec.ForFloat(74);
    private readonly pbc::RepeatedField<float> dmgAngle_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 伤害角度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DmgAngle {
      get { return dmgAngle_; }
    }

    /// <summary>Field number for the "solo_shake_effect" field.</summary>
    public const int SoloShakeEffectFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_soloShakeEffect_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> soloShakeEffect_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 开始特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SoloShakeEffect {
      get { return soloShakeEffect_; }
    }

    /// <summary>Field number for the "solo_trigger_effect" field.</summary>
    public const int SoloTriggerEffectFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_soloTriggerEffect_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> soloTriggerEffect_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 触发特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SoloTriggerEffect {
      get { return soloTriggerEffect_; }
    }

    /// <summary>Field number for the "solo_hit_fly" field.</summary>
    public const int SoloHitFlyFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_soloHitFly_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> soloHitFly_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 击飞参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SoloHitFly {
      get { return soloHitFly_; }
    }

    /// <summary>Field number for the "solo_shake_sound" field.</summary>
    public const int SoloShakeSoundFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_soloShakeSound_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> soloShakeSound_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 触发音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SoloShakeSound {
      get { return soloShakeSound_; }
    }

    /// <summary>Field number for the "solo_trigger_sound" field.</summary>
    public const int SoloTriggerSoundFieldNumber = 14;
    private string soloTriggerSound_ = "";
    /// <summary>
    ///* 击中音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoloTriggerSound {
      get { return soloTriggerSound_; }
      set {
        soloTriggerSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cooldown_delay" field.</summary>
    public const int CooldownDelayFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_cooldownDelay_codec
        = pb::FieldCodec.ForFloat(122);
    private readonly pbc::RepeatedField<float> cooldownDelay_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 连击后额外硬直 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CooldownDelay {
      get { return cooldownDelay_; }
    }

    /// <summary>Field number for the "evade_dis" field.</summary>
    public const int EvadeDisFieldNumber = 16;
    private float evadeDis_;
    /// <summary>
    ///* 闪避距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EvadeDis {
      get { return evadeDis_; }
      set {
        evadeDis_ = value;
      }
    }

    /// <summary>Field number for the "camera_shake" field.</summary>
    public const int CameraShakeFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _repeated_cameraShake_codec
        = pb::FieldCodec.ForString(138);
    private readonly pbc::RepeatedField<string> cameraShake_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 镜头震动 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CameraShake {
      get { return cameraShake_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Solo_Hero_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Solo_Hero_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (JoystickMode != other.JoystickMode) return false;
      if (PowerMax != other.PowerMax) return false;
      if(!powerRecover_.Equals(other.powerRecover_)) return false;
      if(!comboAtk_.Equals(other.comboAtk_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRate, other.SpeedRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtkRange, other.AtkRange)) return false;
      if(!dmgRange_.Equals(other.dmgRange_)) return false;
      if(!dmgAngle_.Equals(other.dmgAngle_)) return false;
      if(!soloShakeEffect_.Equals(other.soloShakeEffect_)) return false;
      if(!soloTriggerEffect_.Equals(other.soloTriggerEffect_)) return false;
      if(!soloHitFly_.Equals(other.soloHitFly_)) return false;
      if(!soloShakeSound_.Equals(other.soloShakeSound_)) return false;
      if (SoloTriggerSound != other.SoloTriggerSound) return false;
      if(!cooldownDelay_.Equals(other.cooldownDelay_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EvadeDis, other.EvadeDis)) return false;
      if(!cameraShake_.Equals(other.cameraShake_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (JoystickMode != 0) hash ^= JoystickMode.GetHashCode();
      if (PowerMax != 0) hash ^= PowerMax.GetHashCode();
      hash ^= powerRecover_.GetHashCode();
      hash ^= comboAtk_.GetHashCode();
      if (SpeedRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRate);
      if (AtkRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtkRange);
      hash ^= dmgRange_.GetHashCode();
      hash ^= dmgAngle_.GetHashCode();
      hash ^= soloShakeEffect_.GetHashCode();
      hash ^= soloTriggerEffect_.GetHashCode();
      hash ^= soloHitFly_.GetHashCode();
      hash ^= soloShakeSound_.GetHashCode();
      if (SoloTriggerSound.Length != 0) hash ^= SoloTriggerSound.GetHashCode();
      hash ^= cooldownDelay_.GetHashCode();
      if (EvadeDis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EvadeDis);
      hash ^= cameraShake_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (JoystickMode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(JoystickMode);
      }
      if (PowerMax != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PowerMax);
      }
      powerRecover_.WriteTo(output, _repeated_powerRecover_codec);
      comboAtk_.WriteTo(output, _repeated_comboAtk_codec);
      if (SpeedRate != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SpeedRate);
      }
      if (AtkRange != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(AtkRange);
      }
      dmgRange_.WriteTo(output, _repeated_dmgRange_codec);
      dmgAngle_.WriteTo(output, _repeated_dmgAngle_codec);
      soloShakeEffect_.WriteTo(output, _repeated_soloShakeEffect_codec);
      soloTriggerEffect_.WriteTo(output, _repeated_soloTriggerEffect_codec);
      soloHitFly_.WriteTo(output, _repeated_soloHitFly_codec);
      soloShakeSound_.WriteTo(output, _repeated_soloShakeSound_codec);
      if (SoloTriggerSound.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(SoloTriggerSound);
      }
      cooldownDelay_.WriteTo(output, _repeated_cooldownDelay_codec);
      if (EvadeDis != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(EvadeDis);
      }
      cameraShake_.WriteTo(output, _repeated_cameraShake_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (JoystickMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(JoystickMode);
      }
      if (PowerMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PowerMax);
      }
      size += powerRecover_.CalculateSize(_repeated_powerRecover_codec);
      size += comboAtk_.CalculateSize(_repeated_comboAtk_codec);
      if (SpeedRate != 0F) {
        size += 1 + 4;
      }
      if (AtkRange != 0F) {
        size += 1 + 4;
      }
      size += dmgRange_.CalculateSize(_repeated_dmgRange_codec);
      size += dmgAngle_.CalculateSize(_repeated_dmgAngle_codec);
      size += soloShakeEffect_.CalculateSize(_repeated_soloShakeEffect_codec);
      size += soloTriggerEffect_.CalculateSize(_repeated_soloTriggerEffect_codec);
      size += soloHitFly_.CalculateSize(_repeated_soloHitFly_codec);
      size += soloShakeSound_.CalculateSize(_repeated_soloShakeSound_codec);
      if (SoloTriggerSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoloTriggerSound);
      }
      size += cooldownDelay_.CalculateSize(_repeated_cooldownDelay_codec);
      if (EvadeDis != 0F) {
        size += 2 + 4;
      }
      size += cameraShake_.CalculateSize(_repeated_cameraShake_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Solo_Hero_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.JoystickMode != 0) {
        JoystickMode = other.JoystickMode;
      }
      if (other.PowerMax != 0) {
        PowerMax = other.PowerMax;
      }
      powerRecover_.Add(other.powerRecover_);
      comboAtk_.Add(other.comboAtk_);
      if (other.SpeedRate != 0F) {
        SpeedRate = other.SpeedRate;
      }
      if (other.AtkRange != 0F) {
        AtkRange = other.AtkRange;
      }
      dmgRange_.Add(other.dmgRange_);
      dmgAngle_.Add(other.dmgAngle_);
      soloShakeEffect_.Add(other.soloShakeEffect_);
      soloTriggerEffect_.Add(other.soloTriggerEffect_);
      soloHitFly_.Add(other.soloHitFly_);
      soloShakeSound_.Add(other.soloShakeSound_);
      if (other.SoloTriggerSound.Length != 0) {
        SoloTriggerSound = other.SoloTriggerSound;
      }
      cooldownDelay_.Add(other.cooldownDelay_);
      if (other.EvadeDis != 0F) {
        EvadeDis = other.EvadeDis;
      }
      cameraShake_.Add(other.cameraShake_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            JoystickMode = input.ReadUInt32();
            break;
          }
          case 24: {
            PowerMax = input.ReadUInt32();
            break;
          }
          case 34:
          case 37: {
            powerRecover_.AddEntriesFrom(input, _repeated_powerRecover_codec);
            break;
          }
          case 42:
          case 45: {
            comboAtk_.AddEntriesFrom(input, _repeated_comboAtk_codec);
            break;
          }
          case 53: {
            SpeedRate = input.ReadFloat();
            break;
          }
          case 61: {
            AtkRange = input.ReadFloat();
            break;
          }
          case 66:
          case 69: {
            dmgRange_.AddEntriesFrom(input, _repeated_dmgRange_codec);
            break;
          }
          case 74:
          case 77: {
            dmgAngle_.AddEntriesFrom(input, _repeated_dmgAngle_codec);
            break;
          }
          case 82: {
            soloShakeEffect_.AddEntriesFrom(input, _repeated_soloShakeEffect_codec);
            break;
          }
          case 90: {
            soloTriggerEffect_.AddEntriesFrom(input, _repeated_soloTriggerEffect_codec);
            break;
          }
          case 98: {
            soloHitFly_.AddEntriesFrom(input, _repeated_soloHitFly_codec);
            break;
          }
          case 106: {
            soloShakeSound_.AddEntriesFrom(input, _repeated_soloShakeSound_codec);
            break;
          }
          case 114: {
            SoloTriggerSound = input.ReadString();
            break;
          }
          case 122:
          case 125: {
            cooldownDelay_.AddEntriesFrom(input, _repeated_cooldownDelay_codec);
            break;
          }
          case 133: {
            EvadeDis = input.ReadFloat();
            break;
          }
          case 138: {
            cameraShake_.AddEntriesFrom(input, _repeated_cameraShake_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Solo_Hero_Config_Data : pb::IMessage<Solo_Hero_Config_Data> {
    private static readonly pb::MessageParser<Solo_Hero_Config_Data> _parser = new pb::MessageParser<Solo_Hero_Config_Data>(() => new Solo_Hero_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Solo_Hero_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Hero_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Hero_Config_Data(Solo_Hero_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Hero_Config_Data Clone() {
      return new Solo_Hero_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Solo_Hero_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Solo_Hero_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Solo_Hero_Config> items_ = new pbc::RepeatedField<global::ConfigData.Solo_Hero_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Solo_Hero_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Solo_Hero_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Solo_Hero_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Solo_Hero_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Solo_Heroes_Data_Config : pb::IMessage<Solo_Heroes_Data_Config> {
    private static readonly pb::MessageParser<Solo_Heroes_Data_Config> _parser = new pb::MessageParser<Solo_Heroes_Data_Config>(() => new Solo_Heroes_Data_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Solo_Heroes_Data_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Heroes_Data_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Heroes_Data_Config(Solo_Heroes_Data_Config other) : this() {
      id_ = other.id_;
      debugLevel_ = other.debugLevel_;
      hpBase_ = other.hpBase_;
      hpGrowth_ = other.hpGrowth_;
      attackBase_ = other.attackBase_;
      attackGrowth_ = other.attackGrowth_;
      realAttackBase_ = other.realAttackBase_;
      realAttackGrowth_ = other.realAttackGrowth_;
      defenceBase_ = other.defenceBase_;
      defenceGrowth_ = other.defenceGrowth_;
      dodgeBase_ = other.dodgeBase_;
      dodgeGrowth_ = other.dodgeGrowth_;
      criticalBase_ = other.criticalBase_;
      criticalGrowth_ = other.criticalGrowth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Heroes_Data_Config Clone() {
      return new Solo_Heroes_Data_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "debug_level" field.</summary>
    public const int DebugLevelFieldNumber = 2;
    private uint debugLevel_;
    /// <summary>
    ///* 英雄测试等级(如果填X则用玩家数据，填了数字则用数字覆盖玩家数据） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DebugLevel {
      get { return debugLevel_; }
      set {
        debugLevel_ = value;
      }
    }

    /// <summary>Field number for the "hp_base" field.</summary>
    public const int HpBaseFieldNumber = 3;
    private float hpBase_;
    /// <summary>
    ///* 血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HpBase {
      get { return hpBase_; }
      set {
        hpBase_ = value;
      }
    }

    /// <summary>Field number for the "hp_growth" field.</summary>
    public const int HpGrowthFieldNumber = 4;
    private float hpGrowth_;
    /// <summary>
    ///* 血量成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HpGrowth {
      get { return hpGrowth_; }
      set {
        hpGrowth_ = value;
      }
    }

    /// <summary>Field number for the "attack_base" field.</summary>
    public const int AttackBaseFieldNumber = 5;
    private float attackBase_;
    /// <summary>
    ///* 攻击值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackBase {
      get { return attackBase_; }
      set {
        attackBase_ = value;
      }
    }

    /// <summary>Field number for the "attack_growth" field.</summary>
    public const int AttackGrowthFieldNumber = 6;
    private float attackGrowth_;
    /// <summary>
    ///* 攻击成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackGrowth {
      get { return attackGrowth_; }
      set {
        attackGrowth_ = value;
      }
    }

    /// <summary>Field number for the "real_attack_base" field.</summary>
    public const int RealAttackBaseFieldNumber = 7;
    private float realAttackBase_;
    /// <summary>
    ///* 真实伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealAttackBase {
      get { return realAttackBase_; }
      set {
        realAttackBase_ = value;
      }
    }

    /// <summary>Field number for the "real_attack_growth" field.</summary>
    public const int RealAttackGrowthFieldNumber = 8;
    private float realAttackGrowth_;
    /// <summary>
    ///* 真实伤害成长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealAttackGrowth {
      get { return realAttackGrowth_; }
      set {
        realAttackGrowth_ = value;
      }
    }

    /// <summary>Field number for the "defence_base" field.</summary>
    public const int DefenceBaseFieldNumber = 9;
    private float defenceBase_;
    /// <summary>
    ///* 防御 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefenceBase {
      get { return defenceBase_; }
      set {
        defenceBase_ = value;
      }
    }

    /// <summary>Field number for the "defence_growth" field.</summary>
    public const int DefenceGrowthFieldNumber = 10;
    private float defenceGrowth_;
    /// <summary>
    ///* 防御成长洗漱 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefenceGrowth {
      get { return defenceGrowth_; }
      set {
        defenceGrowth_ = value;
      }
    }

    /// <summary>Field number for the "dodge_base" field.</summary>
    public const int DodgeBaseFieldNumber = 11;
    private float dodgeBase_;
    /// <summary>
    ///* 闪避值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeBase {
      get { return dodgeBase_; }
      set {
        dodgeBase_ = value;
      }
    }

    /// <summary>Field number for the "dodge_growth" field.</summary>
    public const int DodgeGrowthFieldNumber = 12;
    private float dodgeGrowth_;
    /// <summary>
    ///* 闪避成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeGrowth {
      get { return dodgeGrowth_; }
      set {
        dodgeGrowth_ = value;
      }
    }

    /// <summary>Field number for the "critical_base" field.</summary>
    public const int CriticalBaseFieldNumber = 13;
    private float criticalBase_;
    /// <summary>
    ///* 暴击值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriticalBase {
      get { return criticalBase_; }
      set {
        criticalBase_ = value;
      }
    }

    /// <summary>Field number for the "critical_growth" field.</summary>
    public const int CriticalGrowthFieldNumber = 14;
    private float criticalGrowth_;
    /// <summary>
    ///* 暴击成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriticalGrowth {
      get { return criticalGrowth_; }
      set {
        criticalGrowth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Solo_Heroes_Data_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Solo_Heroes_Data_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DebugLevel != other.DebugLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HpBase, other.HpBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HpGrowth, other.HpGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackBase, other.AttackBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackGrowth, other.AttackGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealAttackBase, other.RealAttackBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealAttackGrowth, other.RealAttackGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefenceBase, other.DefenceBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefenceGrowth, other.DefenceGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeBase, other.DodgeBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeGrowth, other.DodgeGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriticalBase, other.CriticalBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriticalGrowth, other.CriticalGrowth)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DebugLevel != 0) hash ^= DebugLevel.GetHashCode();
      if (HpBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HpBase);
      if (HpGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HpGrowth);
      if (AttackBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackBase);
      if (AttackGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackGrowth);
      if (RealAttackBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealAttackBase);
      if (RealAttackGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealAttackGrowth);
      if (DefenceBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefenceBase);
      if (DefenceGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefenceGrowth);
      if (DodgeBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeBase);
      if (DodgeGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeGrowth);
      if (CriticalBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriticalBase);
      if (CriticalGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriticalGrowth);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (DebugLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DebugLevel);
      }
      if (HpBase != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HpBase);
      }
      if (HpGrowth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HpGrowth);
      }
      if (AttackBase != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AttackBase);
      }
      if (AttackGrowth != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(AttackGrowth);
      }
      if (RealAttackBase != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RealAttackBase);
      }
      if (RealAttackGrowth != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RealAttackGrowth);
      }
      if (DefenceBase != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DefenceBase);
      }
      if (DefenceGrowth != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(DefenceGrowth);
      }
      if (DodgeBase != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DodgeBase);
      }
      if (DodgeGrowth != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DodgeGrowth);
      }
      if (CriticalBase != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(CriticalBase);
      }
      if (CriticalGrowth != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(CriticalGrowth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (DebugLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DebugLevel);
      }
      if (HpBase != 0F) {
        size += 1 + 4;
      }
      if (HpGrowth != 0F) {
        size += 1 + 4;
      }
      if (AttackBase != 0F) {
        size += 1 + 4;
      }
      if (AttackGrowth != 0F) {
        size += 1 + 4;
      }
      if (RealAttackBase != 0F) {
        size += 1 + 4;
      }
      if (RealAttackGrowth != 0F) {
        size += 1 + 4;
      }
      if (DefenceBase != 0F) {
        size += 1 + 4;
      }
      if (DefenceGrowth != 0F) {
        size += 1 + 4;
      }
      if (DodgeBase != 0F) {
        size += 1 + 4;
      }
      if (DodgeGrowth != 0F) {
        size += 1 + 4;
      }
      if (CriticalBase != 0F) {
        size += 1 + 4;
      }
      if (CriticalGrowth != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Solo_Heroes_Data_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DebugLevel != 0) {
        DebugLevel = other.DebugLevel;
      }
      if (other.HpBase != 0F) {
        HpBase = other.HpBase;
      }
      if (other.HpGrowth != 0F) {
        HpGrowth = other.HpGrowth;
      }
      if (other.AttackBase != 0F) {
        AttackBase = other.AttackBase;
      }
      if (other.AttackGrowth != 0F) {
        AttackGrowth = other.AttackGrowth;
      }
      if (other.RealAttackBase != 0F) {
        RealAttackBase = other.RealAttackBase;
      }
      if (other.RealAttackGrowth != 0F) {
        RealAttackGrowth = other.RealAttackGrowth;
      }
      if (other.DefenceBase != 0F) {
        DefenceBase = other.DefenceBase;
      }
      if (other.DefenceGrowth != 0F) {
        DefenceGrowth = other.DefenceGrowth;
      }
      if (other.DodgeBase != 0F) {
        DodgeBase = other.DodgeBase;
      }
      if (other.DodgeGrowth != 0F) {
        DodgeGrowth = other.DodgeGrowth;
      }
      if (other.CriticalBase != 0F) {
        CriticalBase = other.CriticalBase;
      }
      if (other.CriticalGrowth != 0F) {
        CriticalGrowth = other.CriticalGrowth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            DebugLevel = input.ReadUInt32();
            break;
          }
          case 29: {
            HpBase = input.ReadFloat();
            break;
          }
          case 37: {
            HpGrowth = input.ReadFloat();
            break;
          }
          case 45: {
            AttackBase = input.ReadFloat();
            break;
          }
          case 53: {
            AttackGrowth = input.ReadFloat();
            break;
          }
          case 61: {
            RealAttackBase = input.ReadFloat();
            break;
          }
          case 69: {
            RealAttackGrowth = input.ReadFloat();
            break;
          }
          case 77: {
            DefenceBase = input.ReadFloat();
            break;
          }
          case 85: {
            DefenceGrowth = input.ReadFloat();
            break;
          }
          case 93: {
            DodgeBase = input.ReadFloat();
            break;
          }
          case 101: {
            DodgeGrowth = input.ReadFloat();
            break;
          }
          case 109: {
            CriticalBase = input.ReadFloat();
            break;
          }
          case 117: {
            CriticalGrowth = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Solo_Heroes_Data_Config_Data : pb::IMessage<Solo_Heroes_Data_Config_Data> {
    private static readonly pb::MessageParser<Solo_Heroes_Data_Config_Data> _parser = new pb::MessageParser<Solo_Heroes_Data_Config_Data>(() => new Solo_Heroes_Data_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Solo_Heroes_Data_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Heroes_Data_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Heroes_Data_Config_Data(Solo_Heroes_Data_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Solo_Heroes_Data_Config_Data Clone() {
      return new Solo_Heroes_Data_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Solo_Heroes_Data_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Solo_Heroes_Data_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Solo_Heroes_Data_Config> items_ = new pbc::RepeatedField<global::ConfigData.Solo_Heroes_Data_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Solo_Heroes_Data_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Solo_Heroes_Data_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Solo_Heroes_Data_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Solo_Heroes_Data_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UI_Heroes_Config : pb::IMessage<UI_Heroes_Config> {
    private static readonly pb::MessageParser<UI_Heroes_Config> _parser = new pb::MessageParser<UI_Heroes_Config>(() => new UI_Heroes_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UI_Heroes_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UI_Heroes_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UI_Heroes_Config(UI_Heroes_Config other) : this() {
      id_ = other.id_;
      heroEpicGlobal_ = other.heroEpicGlobal_;
      type_ = other.type_;
      hide_ = other.hide_;
      scale_ = other.scale_;
      rot_ = other.rot_;
      position_ = other.position_;
      equip_ = other.equip_;
      cardId_ = other.cardId_;
      summonCost_ = other.summonCost_;
      levelupGold_ = other.levelupGold_;
      heroSound_ = other.heroSound_;
      talentCostRrate_ = other.talentCostRrate_;
      rrateGrow_ = other.rrateGrow_;
      sfx_ = other.sfx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UI_Heroes_Config Clone() {
      return new UI_Heroes_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "hero_epic_global" field.</summary>
    public const int HeroEpicGlobalFieldNumber = 2;
    private string heroEpicGlobal_ = "";
    /// <summary>
    ///* 英雄描述语言(索引多语言表) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroEpicGlobal {
      get { return heroEpicGlobal_; }
      set {
        heroEpicGlobal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    ///* 英雄定位说明(索引多语言表) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hide" field.</summary>
    public const int HideFieldNumber = 4;
    private bool hide_;
    /// <summary>
    ///* 是否隐藏 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hide {
      get { return hide_; }
      set {
        hide_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 5;
    private float scale_;
    /// <summary>
    ///* 缩放比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rot" field.</summary>
    public const int RotFieldNumber = 6;
    private string rot_ = "";
    /// <summary>
    ///* 旋转 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rot {
      get { return rot_; }
      set {
        rot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 7;
    private string position_ = "";
    /// <summary>
    ///* 偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equip" field.</summary>
    public const int EquipFieldNumber = 8;
    private string equip_ = "";
    /// <summary>
    ///* 装备ID(用|隔开) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Equip {
      get { return equip_; }
      set {
        equip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "card_id" field.</summary>
    public const int CardIdFieldNumber = 9;
    private uint cardId_;
    /// <summary>
    ///* 英雄碎片ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CardId {
      get { return cardId_; }
      set {
        cardId_ = value;
      }
    }

    /// <summary>Field number for the "summon_cost" field.</summary>
    public const int SummonCostFieldNumber = 10;
    private uint summonCost_;
    /// <summary>
    ///* 英雄合成(召唤)需要碎片数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SummonCost {
      get { return summonCost_; }
      set {
        summonCost_ = value;
      }
    }

    /// <summary>Field number for the "levelup_gold" field.</summary>
    public const int LevelupGoldFieldNumber = 11;
    private uint levelupGold_;
    /// <summary>
    ///* 英雄升级花费 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelupGold {
      get { return levelupGold_; }
      set {
        levelupGold_ = value;
      }
    }

    /// <summary>Field number for the "hero_sound" field.</summary>
    public const int HeroSoundFieldNumber = 12;
    private string heroSound_ = "";
    /// <summary>
    ///* 英雄语音 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroSound {
      get { return heroSound_; }
      set {
        heroSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "talent_cost_rrate" field.</summary>
    public const int TalentCostRrateFieldNumber = 13;
    private float talentCostRrate_;
    /// <summary>
    ///* 天赋消耗基础返还率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TalentCostRrate {
      get { return talentCostRrate_; }
      set {
        talentCostRrate_ = value;
      }
    }

    /// <summary>Field number for the "rrate_grow" field.</summary>
    public const int RrateGrowFieldNumber = 14;
    private float rrateGrow_;
    /// <summary>
    ///* 返还率成长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RrateGrow {
      get { return rrateGrow_; }
      set {
        rrateGrow_ = value;
      }
    }

    /// <summary>Field number for the "sfx" field.</summary>
    public const int SfxFieldNumber = 15;
    private string sfx_ = "";
    /// <summary>
    ///* 抽将展示动画场景名 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sfx {
      get { return sfx_; }
      set {
        sfx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UI_Heroes_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UI_Heroes_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (HeroEpicGlobal != other.HeroEpicGlobal) return false;
      if (Type != other.Type) return false;
      if (Hide != other.Hide) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (Rot != other.Rot) return false;
      if (Position != other.Position) return false;
      if (Equip != other.Equip) return false;
      if (CardId != other.CardId) return false;
      if (SummonCost != other.SummonCost) return false;
      if (LevelupGold != other.LevelupGold) return false;
      if (HeroSound != other.HeroSound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TalentCostRrate, other.TalentCostRrate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RrateGrow, other.RrateGrow)) return false;
      if (Sfx != other.Sfx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (HeroEpicGlobal.Length != 0) hash ^= HeroEpicGlobal.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Hide != false) hash ^= Hide.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Rot.Length != 0) hash ^= Rot.GetHashCode();
      if (Position.Length != 0) hash ^= Position.GetHashCode();
      if (Equip.Length != 0) hash ^= Equip.GetHashCode();
      if (CardId != 0) hash ^= CardId.GetHashCode();
      if (SummonCost != 0) hash ^= SummonCost.GetHashCode();
      if (LevelupGold != 0) hash ^= LevelupGold.GetHashCode();
      if (HeroSound.Length != 0) hash ^= HeroSound.GetHashCode();
      if (TalentCostRrate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TalentCostRrate);
      if (RrateGrow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RrateGrow);
      if (Sfx.Length != 0) hash ^= Sfx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HeroEpicGlobal.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HeroEpicGlobal);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (Hide != false) {
        output.WriteRawTag(32);
        output.WriteBool(Hide);
      }
      if (Scale != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Scale);
      }
      if (Rot.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Rot);
      }
      if (Position.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Position);
      }
      if (Equip.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Equip);
      }
      if (CardId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CardId);
      }
      if (SummonCost != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(SummonCost);
      }
      if (LevelupGold != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(LevelupGold);
      }
      if (HeroSound.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(HeroSound);
      }
      if (TalentCostRrate != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(TalentCostRrate);
      }
      if (RrateGrow != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(RrateGrow);
      }
      if (Sfx.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Sfx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HeroEpicGlobal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroEpicGlobal);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Hide != false) {
        size += 1 + 1;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Rot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rot);
      }
      if (Position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Position);
      }
      if (Equip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Equip);
      }
      if (CardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CardId);
      }
      if (SummonCost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SummonCost);
      }
      if (LevelupGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelupGold);
      }
      if (HeroSound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroSound);
      }
      if (TalentCostRrate != 0F) {
        size += 1 + 4;
      }
      if (RrateGrow != 0F) {
        size += 1 + 4;
      }
      if (Sfx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sfx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UI_Heroes_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.HeroEpicGlobal.Length != 0) {
        HeroEpicGlobal = other.HeroEpicGlobal;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Hide != false) {
        Hide = other.Hide;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Rot.Length != 0) {
        Rot = other.Rot;
      }
      if (other.Position.Length != 0) {
        Position = other.Position;
      }
      if (other.Equip.Length != 0) {
        Equip = other.Equip;
      }
      if (other.CardId != 0) {
        CardId = other.CardId;
      }
      if (other.SummonCost != 0) {
        SummonCost = other.SummonCost;
      }
      if (other.LevelupGold != 0) {
        LevelupGold = other.LevelupGold;
      }
      if (other.HeroSound.Length != 0) {
        HeroSound = other.HeroSound;
      }
      if (other.TalentCostRrate != 0F) {
        TalentCostRrate = other.TalentCostRrate;
      }
      if (other.RrateGrow != 0F) {
        RrateGrow = other.RrateGrow;
      }
      if (other.Sfx.Length != 0) {
        Sfx = other.Sfx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            HeroEpicGlobal = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            Hide = input.ReadBool();
            break;
          }
          case 45: {
            Scale = input.ReadFloat();
            break;
          }
          case 50: {
            Rot = input.ReadString();
            break;
          }
          case 58: {
            Position = input.ReadString();
            break;
          }
          case 66: {
            Equip = input.ReadString();
            break;
          }
          case 72: {
            CardId = input.ReadUInt32();
            break;
          }
          case 80: {
            SummonCost = input.ReadUInt32();
            break;
          }
          case 88: {
            LevelupGold = input.ReadUInt32();
            break;
          }
          case 98: {
            HeroSound = input.ReadString();
            break;
          }
          case 109: {
            TalentCostRrate = input.ReadFloat();
            break;
          }
          case 117: {
            RrateGrow = input.ReadFloat();
            break;
          }
          case 122: {
            Sfx = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UI_Heroes_Config_Data : pb::IMessage<UI_Heroes_Config_Data> {
    private static readonly pb::MessageParser<UI_Heroes_Config_Data> _parser = new pb::MessageParser<UI_Heroes_Config_Data>(() => new UI_Heroes_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UI_Heroes_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UI_Heroes_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UI_Heroes_Config_Data(UI_Heroes_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UI_Heroes_Config_Data Clone() {
      return new UI_Heroes_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.UI_Heroes_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.UI_Heroes_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.UI_Heroes_Config> items_ = new pbc::RepeatedField<global::ConfigData.UI_Heroes_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.UI_Heroes_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UI_Heroes_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UI_Heroes_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UI_Heroes_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Type_Config : pb::IMessage<Heroes_Type_Config> {
    private static readonly pb::MessageParser<Heroes_Type_Config> _parser = new pb::MessageParser<Heroes_Type_Config>(() => new Heroes_Type_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Type_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Type_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Type_Config(Heroes_Type_Config other) : this() {
      id_ = other.id_;
      heroIcon_ = other.heroIcon_;
      globalStringId_ = other.globalStringId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Type_Config Clone() {
      return new Heroes_Type_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Hero_Icon" field.</summary>
    public const int HeroIconFieldNumber = 2;
    private string heroIcon_ = "";
    /// <summary>
    ///* 图标资源 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeroIcon {
      get { return heroIcon_; }
      set {
        heroIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "global_string_id" field.</summary>
    public const int GlobalStringIdFieldNumber = 3;
    private string globalStringId_ = "";
    /// <summary>
    ///* 多语言key 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GlobalStringId {
      get { return globalStringId_; }
      set {
        globalStringId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Type_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Type_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (HeroIcon != other.HeroIcon) return false;
      if (GlobalStringId != other.GlobalStringId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (HeroIcon.Length != 0) hash ^= HeroIcon.GetHashCode();
      if (GlobalStringId.Length != 0) hash ^= GlobalStringId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HeroIcon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HeroIcon);
      }
      if (GlobalStringId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GlobalStringId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HeroIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeroIcon);
      }
      if (GlobalStringId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GlobalStringId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Type_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.HeroIcon.Length != 0) {
        HeroIcon = other.HeroIcon;
      }
      if (other.GlobalStringId.Length != 0) {
        GlobalStringId = other.GlobalStringId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            HeroIcon = input.ReadString();
            break;
          }
          case 26: {
            GlobalStringId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heroes_Type_Config_Data : pb::IMessage<Heroes_Type_Config_Data> {
    private static readonly pb::MessageParser<Heroes_Type_Config_Data> _parser = new pb::MessageParser<Heroes_Type_Config_Data>(() => new Heroes_Type_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heroes_Type_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.HeroesConfigReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Type_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Type_Config_Data(Heroes_Type_Config_Data other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heroes_Type_Config_Data Clone() {
      return new Heroes_Type_Config_Data(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ConfigData.Heroes_Type_Config> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::ConfigData.Heroes_Type_Config.Parser);
    private readonly pbc::RepeatedField<global::ConfigData.Heroes_Type_Config> items_ = new pbc::RepeatedField<global::ConfigData.Heroes_Type_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ConfigData.Heroes_Type_Config> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heroes_Type_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heroes_Type_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heroes_Type_Config_Data other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
